{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.3"
    },
    "colab": {
      "name": "techlabs_notebook_bike_sharing-exercise.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5IKYN_qOcTPG"
      },
      "source": [
        "# Forecasting Project using the BIKE SHARING DATASET"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7-7Fb2uhcTPI"
      },
      "source": [
        "## Introduction\n",
        "Welcome Techie!\n",
        "\n",
        "So far you've learned how to explore, clean, and visualize data as well as how to implement supervised and unsupervised machine learning models. Congratulations!\n",
        "\n",
        "In this notebook you are going to combine all these skills and knowledge to build a forecasting project for a bike sharing startup.\n",
        "\n",
        "Start by watching the video below to recall which machine learning steps are important. \n",
        "Have fun!"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 421
        },
        "id": "Kb8axoJxcTPJ",
        "outputId": "bafdf988-2439-4e59-db50-5539d783fceb"
      },
      "source": [
        "from IPython.display import YouTubeVideo\n",
        "YouTubeVideo('nKW8Ndu7Mjw', width=600, height=400)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/jpeg": "\n",
            "text/html": [
              "\n",
              "        <iframe\n",
              "            width=\"600\"\n",
              "            height=\"400\"\n",
              "            src=\"https://www.youtube.com/embed/nKW8Ndu7Mjw\"\n",
              "            frameborder=\"0\"\n",
              "            allowfullscreen\n",
              "        ></iframe>\n",
              "        "
            ],
            "text/plain": [
              "<IPython.lib.display.YouTubeVideo at 0x10601ef60>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 1
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LMb2klg7vben"
      },
      "source": [
        "This is a very helpful and good video which summarises steps of a machine learning project in a short and nice way.\n",
        "\n",
        "But do you agree with everything in the video? Can we generalize every machine learning project into these steps? I don't want to critizes the video. I just want you to think critically.\n",
        "\n",
        "It is hard to say \"Do exactly these 7 things during a machine learning project and everything will work\". All problems and also machine learning problems are contextual. Thus, what all problems have in common are not the single steps and solutions but the questions that always come up.\n",
        "\n",
        "As an example. Instead of saying \"I have to randomize the data and split it into training and testing\", ask \"What is the best way to split my data?\". We will see later why this is important.\n",
        "\n",
        "The video also mostly described a classification problem but what if you have a regression problem? Can you use the same steps? We will uncover this question in this notebook since we have a regression problem at hand."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZdwQ6Ah1vbeo"
      },
      "source": [
        "## Your experience\n",
        "Briefly sketch out what you think should be included into a data science project. \n",
        "Which steps are necessary? What have you learnt so far during the online courses?  \n",
        "You can write your ideas here into the cell below or grab pen and paper (as I often do) and write down each step which you would add to a data science project."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "h-E969YYvbeo"
      },
      "source": [
        "https://playground.tensorflow.org/ # to play around with data\r\n",
        "\r\n",
        "**1. Import and visualize data**\r\n",
        "*  data type? index and cols?\r\n",
        "*  missing data?\r\n",
        "*  df.describe() and df.info() to check min/max/mean etc\r\n",
        "*  plot: histograms, scatter between values\r\n",
        "*  form already some question/hypotheses\r\n",
        "\r\n",
        "**2. Clean data**\r\n",
        "*  delete/impute NaNs (mean column/prev+next value)\r\n",
        "*  clean text (spaces, inconsistencies with categories)\r\n",
        "*  set to correct dtype (category eg)\r\n",
        "*  remove outliers?\r\n",
        "\r\n",
        "**3. Form hypotheses and set strategy**\r\n",
        "*  which possible correlations?\r\n",
        "*  what do we want to know?\r\n",
        "\r\n",
        "**4. Analyze data**\r\n",
        "* prepare data\r\n",
        "* classification/regression  \r\n",
        "* supervised/unsupervised\r\n",
        "\r\n",
        "Try different models. Possible:\r\n",
        "*  linear/logistic regression\r\n",
        "*  SVM\r\n",
        "*  K-MEANS\r\n",
        "\r\n",
        "**5. Evaluate models & tune hyperparams**\r\n",
        "*  accuracy/other metrics (test set)\r\n",
        "*  try different hyperparams\r\n",
        "*  final accuracy measure using cross-val dataset"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AUrnQfPPcTPQ"
      },
      "source": [
        "## Learning Goals\n",
        "\n",
        "It is time for you to implement your <b><font color='blue'>frist machine learning (ML) models</font></b> from skretch and practice what you have learnt so far. Additionally, the goal of this notebook is to introduce you to a <b><font color='blue'>Data Science Hypothesis Process</font></b> which you can use later for your own projects. This process will allow you to make data science projects repeatable by establishing a machine learning strategy instead of a machine learning snapshot.\n",
        "\n",
        "The notebook is structured in such a way that you will go through a whole data science project. From a short data <b><font color='blue'>exploration</font></b> to data <b><font color='blue'>cleaning</font></b> and <b><font color='blue'>preparation</font></b> to <b><font color='blue'>formulating hypotheses** and **building ML models</font></b> which you then evaluate and refine.\n",
        "\n",
        "After finishing this notebook you should feel more confident starting data science projects. You will know which questions/steps are important and relevant during a data science project and how to train and evaluate ML models. With this practice it will be easier for you to work with your team and solve your next data science problem.\n",
        "\n",
        "Everything you will need to do will be inside of this notebook, and I've marked which cells you will need to edit by saying <b><font color='red'>\"TODO! COMPLETE THIS SECTION!\"</font></b>. Inside the cells you'll find `...`. These are the places where you have to add your code. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NCSSHIMWcTPS"
      },
      "source": [
        "## Practice with Bike Sharing dataset\n",
        "\n",
        "Before you start make sure you read the README pdf file inside the unzipped folder.\n",
        "\n",
        "Let's build a story and client problem around the dataset so that it feels more realistic and gives us a sense of solving a real world problem.\n",
        "\n",
        "A Münster-based startup called LeezenShare is a bike sharing startup with five stores distributed around the city. Their bike sharing service is on the rise but recently they faced a wave of complaints from customers and employees. \n",
        "\n",
        "Most of the customers have two issues. Frist, they are reporting the stores at Hafenstraße and Königsweg don't have enough available bikes on the spot. Second, at store Weseler Str., where a lot of bikes are available they have to wait a very long time before an employee can help them. Employees on the other hand feel overwhelmed with the work at store Weseler Straße and are very stressed because of the huge number of customers in the stores.\n",
        "\n",
        "So the startup LeezenShare approached you - the data scientist - for help. They want to improve their customer and employee experience at their stores by making better decisions on how to distribute bikes across the stores. They want a forecasting system from you so that they know when and where bikes are needed. For the start they give you only the data of one store. You have to prove to them that you can build a forecasting system and help them at that one store.\n",
        "\n",
        "Challenge accepted.\n",
        "\n",
        "### import libraries\n",
        "First import some libraries we need for some data exploration."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3QOAscN3cTPT"
      },
      "source": [
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n",
        "\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import numpy as np"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ySw-IK3tcTPW"
      },
      "source": [
        "### first impression and information about the dataset\n",
        "\n",
        "First, load and explore the data before diving into the machine learning models. You have to get a feeling what kind of data your are dealing with."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3tK0g33UcTPX"
      },
      "source": [
        "Import bike sharing dataset by loading the `data_bikesharing.csv` file.\n",
        "\n",
        "<h4><font color='red'>TODO! COMPLETE THIS SECTION!</font></h4>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "s-i9uzplcTPX"
      },
      "source": [
        "# Import the csv file using pandas\n",
        "df = pd.read_csv('bikesharing.csv')"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vk14bsswvbes"
      },
      "source": [
        "Check how many rows and columns the dataset has and display the first 5 rows.\n",
        "\n",
        "<h4><font color='red'>TODO! COMPLETE THIS SECTION!</font></h4>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ebc14L0Uvbes",
        "outputId": "ac18c745-3f9e-4bb8-f250-ed7383c0ca08"
      },
      "source": [
        "# output the shape of the data set\n",
        "df.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(10886, 12)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5SrkO2axvbet"
      },
      "source": [
        "<h4><font color='red'>TODO! COMPLETE THIS SECTION!</font></h4>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 203
        },
        "id": "4DH4U0tCvbet",
        "outputId": "a08d8d0a-736a-4bcd-95ea-73732187db6a"
      },
      "source": [
        "# output the first five rows of the data set\n",
        "df.head(5)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>datetime</th>\n",
              "      <th>season</th>\n",
              "      <th>holiday</th>\n",
              "      <th>workingday</th>\n",
              "      <th>weather</th>\n",
              "      <th>temp</th>\n",
              "      <th>atemp</th>\n",
              "      <th>humidity</th>\n",
              "      <th>windspeed</th>\n",
              "      <th>casual</th>\n",
              "      <th>registered</th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2011-01-01 00:00:00</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>9.84</td>\n",
              "      <td>14.395</td>\n",
              "      <td>81</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3</td>\n",
              "      <td>13</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2011-01-01 01:00:00</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>9.02</td>\n",
              "      <td>13.635</td>\n",
              "      <td>80</td>\n",
              "      <td>0.0</td>\n",
              "      <td>8</td>\n",
              "      <td>32</td>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2011-01-01 02:00:00</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>9.02</td>\n",
              "      <td>13.635</td>\n",
              "      <td>80</td>\n",
              "      <td>0.0</td>\n",
              "      <td>5</td>\n",
              "      <td>27</td>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2011-01-01 03:00:00</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>9.84</td>\n",
              "      <td>14.395</td>\n",
              "      <td>75</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3</td>\n",
              "      <td>10</td>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2011-01-01 04:00:00</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>9.84</td>\n",
              "      <td>14.395</td>\n",
              "      <td>75</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "              datetime  season  holiday  ...  casual  registered  count\n",
              "0  2011-01-01 00:00:00       1        0  ...       3          13     16\n",
              "1  2011-01-01 01:00:00       1        0  ...       8          32     40\n",
              "2  2011-01-01 02:00:00       1        0  ...       5          27     32\n",
              "3  2011-01-01 03:00:00       1        0  ...       3          10     13\n",
              "4  2011-01-01 04:00:00       1        0  ...       0           1      1\n",
              "\n",
              "[5 rows x 12 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "splFMPCKvbet"
      },
      "source": [
        "Now you see which columns and information are available to you. Below you can find a more detailed description of the columns.\n",
        "\n",
        "**Column discribtion**\n",
        "\n",
        "- datetime: date + hourly time\n",
        "- season: 1 = spring, 2 = summer, 3 = fall, 4 = winter\n",
        "- holiday: whether the day is considered a holiday \n",
        "  - 0: no holiday \n",
        "  - 1: holiday\n",
        "- workingday\n",
        "  - 0: no workingday\n",
        "  - 1: workingday\n",
        "- weather -\n",
        "  - 1: Clear, Few clouds, Partly cloudy, Partly cloudy\n",
        "  - 2: Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist\n",
        "  - 3: Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds\n",
        "  - 4: Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog\n",
        "- temp: temperature in Celsius\n",
        "- atemp: \"feels like\" temperature in Celsius\n",
        "- humidity: relative humidity\n",
        "- windspeed: wind speed\n",
        "- casual: number of non-registered user rentals initiated\n",
        "- registered: number of registered user rentals initiated\n",
        "- count: number of total rentals (Dependent Variable)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SD8Zoomkvbeu"
      },
      "source": [
        "We have to change a small thing before you do further explorations. The \"count\" column is the target column. But \"count\" as column name is a bad choice since a pandas method is also called .count(). Thus let's rename the count column to \"target\"."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 203
        },
        "id": "FNhx0oQ_vbeu",
        "outputId": "91b4a659-6201-4b0e-937c-439b8e71f337"
      },
      "source": [
        "df.rename(columns={'count': 'target'}, inplace=True)\n",
        "df.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>datetime</th>\n",
              "      <th>season</th>\n",
              "      <th>holiday</th>\n",
              "      <th>workingday</th>\n",
              "      <th>weather</th>\n",
              "      <th>temp</th>\n",
              "      <th>atemp</th>\n",
              "      <th>humidity</th>\n",
              "      <th>windspeed</th>\n",
              "      <th>casual</th>\n",
              "      <th>registered</th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2011-01-01 00:00:00</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>9.84</td>\n",
              "      <td>14.395</td>\n",
              "      <td>81</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3</td>\n",
              "      <td>13</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2011-01-01 01:00:00</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>9.02</td>\n",
              "      <td>13.635</td>\n",
              "      <td>80</td>\n",
              "      <td>0.0</td>\n",
              "      <td>8</td>\n",
              "      <td>32</td>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2011-01-01 02:00:00</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>9.02</td>\n",
              "      <td>13.635</td>\n",
              "      <td>80</td>\n",
              "      <td>0.0</td>\n",
              "      <td>5</td>\n",
              "      <td>27</td>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2011-01-01 03:00:00</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>9.84</td>\n",
              "      <td>14.395</td>\n",
              "      <td>75</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3</td>\n",
              "      <td>10</td>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2011-01-01 04:00:00</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>9.84</td>\n",
              "      <td>14.395</td>\n",
              "      <td>75</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "              datetime  season  holiday  ...  casual  registered  target\n",
              "0  2011-01-01 00:00:00       1        0  ...       3          13      16\n",
              "1  2011-01-01 01:00:00       1        0  ...       8          32      40\n",
              "2  2011-01-01 02:00:00       1        0  ...       5          27      32\n",
              "3  2011-01-01 03:00:00       1        0  ...       3          10      13\n",
              "4  2011-01-01 04:00:00       1        0  ...       0           1       1\n",
              "\n",
              "[5 rows x 12 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 72
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "D5BAG9QQvbev"
      },
      "source": [
        "Now that we have changed the column name, let's continue with the data exploration. Check the column types. Does the datetime column really contain datetime type of data?\n",
        "\n",
        "<h4><font color='red'>TODO! COMPLETE THIS SECTION!</font></h4>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WiR9xPnIvbev",
        "outputId": "c3545d40-7d9a-4977-ea57-c2556b89a9be"
      },
      "source": [
        "# output the column types of the data set\n",
        "df.info()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 10886 entries, 0 to 10885\n",
            "Data columns (total 12 columns):\n",
            " #   Column      Non-Null Count  Dtype  \n",
            "---  ------      --------------  -----  \n",
            " 0   datetime    10886 non-null  object \n",
            " 1   season      10886 non-null  int64  \n",
            " 2   holiday     10886 non-null  int64  \n",
            " 3   workingday  10886 non-null  int64  \n",
            " 4   weather     10886 non-null  int64  \n",
            " 5   temp        10886 non-null  float64\n",
            " 6   atemp       10886 non-null  float64\n",
            " 7   humidity    10886 non-null  int64  \n",
            " 8   windspeed   10886 non-null  float64\n",
            " 9   casual      10886 non-null  int64  \n",
            " 10  registered  10886 non-null  int64  \n",
            " 11  target      10886 non-null  int64  \n",
            "dtypes: float64(3), int64(8), object(1)\n",
            "memory usage: 1020.7+ KB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uTQ6LBKDvbev"
      },
      "source": [
        "The columns are mostly of type integer or float. But the datetime column is of type object even though it is supposed to be of type datetime. Thus change the datetime column to datetime type.\n",
        "\n",
        "<h4><font color='red'>TODO! COMPLETE THIS SECTION!</font></h4>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AZROTJpDvbev"
      },
      "source": [
        "# use a pandas method to change the type of the datetime column to datetime\n",
        "df.datetime = pd.to_datetime(df['datetime'])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8d-ZiwSKvbew"
      },
      "source": [
        "Let's have a look again, if the datetime column has the right type now."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "o1YBDJDRvbew",
        "outputId": "1ebea199-bba3-422b-81b1-2e9e03ec9636"
      },
      "source": [
        "df.info()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 10886 entries, 0 to 10885\n",
            "Data columns (total 12 columns):\n",
            " #   Column      Non-Null Count  Dtype         \n",
            "---  ------      --------------  -----         \n",
            " 0   datetime    10886 non-null  datetime64[ns]\n",
            " 1   season      10886 non-null  int64         \n",
            " 2   holiday     10886 non-null  int64         \n",
            " 3   workingday  10886 non-null  int64         \n",
            " 4   weather     10886 non-null  int64         \n",
            " 5   temp        10886 non-null  float64       \n",
            " 6   atemp       10886 non-null  float64       \n",
            " 7   humidity    10886 non-null  int64         \n",
            " 8   windspeed   10886 non-null  float64       \n",
            " 9   casual      10886 non-null  int64         \n",
            " 10  registered  10886 non-null  int64         \n",
            " 11  target      10886 non-null  int64         \n",
            "dtypes: datetime64[ns](1), float64(3), int64(8)\n",
            "memory usage: 1020.7 KB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MWE3AANnvbew"
      },
      "source": [
        "Perfect, now the datetime column has the type datetime64[ns].\n",
        "\n",
        "Since we have a unique timeseries, set the datetime column as index. \n",
        "\n",
        "<h4><font color='red'>TODO! COMPLETE THIS SECTION!</font></h4>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MaA9k0gHvbew"
      },
      "source": [
        "# set the datetime column as index. Don't forget to use the inplace variable\n",
        "df.set_index('datetime',inplace=True)\n",
        "\n",
        "# this will just test if you set the index correct\n",
        "message = (\n",
        "    \"You have to set the index inplace. The \"\n",
        "    \"datetime columnn should only exist as \"\n",
        "    \"an index and not as a column anymore.\")\n",
        "assert df.shape[1] == 11, message"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MWdYyeFuvbex"
      },
      "source": [
        "Check how the data set looks with datetime as index."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 233
        },
        "id": "G7Vzqi62vbex",
        "outputId": "edc3a4b4-4f4a-4860-9d8c-1a38dc705502"
      },
      "source": [
        "df.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>season</th>\n",
              "      <th>holiday</th>\n",
              "      <th>workingday</th>\n",
              "      <th>weather</th>\n",
              "      <th>temp</th>\n",
              "      <th>atemp</th>\n",
              "      <th>humidity</th>\n",
              "      <th>windspeed</th>\n",
              "      <th>casual</th>\n",
              "      <th>registered</th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>datetime</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2011-01-01 00:00:00</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>9.84</td>\n",
              "      <td>14.395</td>\n",
              "      <td>81</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3</td>\n",
              "      <td>13</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 01:00:00</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>9.02</td>\n",
              "      <td>13.635</td>\n",
              "      <td>80</td>\n",
              "      <td>0.0</td>\n",
              "      <td>8</td>\n",
              "      <td>32</td>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 02:00:00</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>9.02</td>\n",
              "      <td>13.635</td>\n",
              "      <td>80</td>\n",
              "      <td>0.0</td>\n",
              "      <td>5</td>\n",
              "      <td>27</td>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 03:00:00</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>9.84</td>\n",
              "      <td>14.395</td>\n",
              "      <td>75</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3</td>\n",
              "      <td>10</td>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 04:00:00</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>9.84</td>\n",
              "      <td>14.395</td>\n",
              "      <td>75</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                     season  holiday  workingday  ...  casual  registered  target\n",
              "datetime                                          ...                            \n",
              "2011-01-01 00:00:00       1        0           0  ...       3          13      16\n",
              "2011-01-01 01:00:00       1        0           0  ...       8          32      40\n",
              "2011-01-01 02:00:00       1        0           0  ...       5          27      32\n",
              "2011-01-01 03:00:00       1        0           0  ...       3          10      13\n",
              "2011-01-01 04:00:00       1        0           0  ...       0           1       1\n",
              "\n",
              "[5 rows x 11 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 61
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4YpZcq93vbex"
      },
      "source": [
        "Now find out what the date range of the data set is.\n",
        "\n",
        "<h4><font color='red'>TODO! COMPLETE THIS SECTION!</font></h4>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CkjLT90jvbex",
        "outputId": "1742411d-9e1a-46f2-c2f1-11b31354682f"
      },
      "source": [
        "# output the minimum datetime\n",
        "df.index.min()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Timestamp('2011-01-01 00:00:00')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 62
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IgNLSOqavbex"
      },
      "source": [
        "<h4><font color='red'>TODO! COMPLETE THIS SECTION!</font></h4>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jfEYBfi3vbey",
        "outputId": "9fcdd3c0-098d-4512-8432-5fdf80657fd6"
      },
      "source": [
        "# output the maximum datetime\n",
        "df.index.max()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Timestamp('2012-12-19 23:00:00')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 63
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PN7j0XJtvbey"
      },
      "source": [
        "As you found out, we have approximately two years of data.\n",
        "\n",
        "But do we have information on every single day and every single hour? This is very important for the machine learning models which you are going to implement. If no or only a few values are missing you can utilize the time series information perfectly by using models built explicitly for time series. But if you find out that the data contains a lot of missing values, you should select different machine learning models. Thus check if the data contains missing values in the form of nan values. \n",
        "\n",
        "<h4><font color='red'>TODO! COMPLETE THIS SECTION!</font></h4>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GE_SPGwMvbey",
        "outputId": "1274095c-d2de-49da-98c0-2cf757b6bc84"
      },
      "source": [
        "# how many null/nan values do the columns have\n",
        "df.isnull().sum()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "season        0\n",
              "holiday       0\n",
              "workingday    0\n",
              "weather       0\n",
              "temp          0\n",
              "atemp         0\n",
              "humidity      0\n",
              "windspeed     0\n",
              "casual        0\n",
              "registered    0\n",
              "target        0\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 64
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mBhNpLrDvbe1"
      },
      "source": [
        "Nice. There are no null/nan values. But before we celebrate, let's check if the data set contains every datetime in the date range you found.\n",
        "\n",
        "<h4><font color='red'>TODO! COMPLETE THIS SECTION!</font></h4>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FsJZVnkAKmac"
      },
      "source": [
        "df1 = df"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lfIWd3OUvbe1",
        "outputId": "b243945e-f436-4172-8bdd-fafb42283ff1"
      },
      "source": [
        "# create a list of datetimes starting from the minimum date of the dataset\n",
        "# to the maximum date of the data set. \n",
        "idx = pd.date_range(start=df.index.min(), end=df.index.max(), freq='H') #df.resample('H')\n",
        "assert len(idx) == 17256, \"Did you set the frequency to hours?\"\n",
        "\n",
        "# reindex the data set and fill missing values with nan\n",
        "df = df.reindex(idx, fill_value=pd.np.nan)\n",
        "\n",
        "# get a list of datetimes where the target is nan\n",
        "missing = df.index[df['target'].isna()]\n",
        "message = (\n",
        "    \"Something went wrong. Check if you \"\n",
        "    \"reindexed the data set correctly or if you \"\n",
        "    \"selected the the nan target values correctly.\")\n",
        "assert len(missing) == 6370, message\n",
        "missing"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DatetimeIndex(['2011-01-02 05:00:00', '2011-01-03 02:00:00',\n",
              "               '2011-01-03 03:00:00', '2011-01-04 03:00:00',\n",
              "               '2011-01-05 03:00:00', '2011-01-06 03:00:00',\n",
              "               '2011-01-07 03:00:00', '2011-01-11 03:00:00',\n",
              "               '2011-01-11 04:00:00', '2011-01-12 03:00:00',\n",
              "               ...\n",
              "               '2012-11-30 14:00:00', '2012-11-30 15:00:00',\n",
              "               '2012-11-30 16:00:00', '2012-11-30 17:00:00',\n",
              "               '2012-11-30 18:00:00', '2012-11-30 19:00:00',\n",
              "               '2012-11-30 20:00:00', '2012-11-30 21:00:00',\n",
              "               '2012-11-30 22:00:00', '2012-11-30 23:00:00'],\n",
              "              dtype='datetime64[ns]', length=6370, freq=None)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 86
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uwxFVl3WI86T"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "S6teYv-dvbe2"
      },
      "source": [
        "Ok we don't have the information for every single day and every single hour. How many percent of the data is missing?\n",
        "\n",
        "<h4><font color='red'>TODO! COMPLETE THIS SECTION!</font></h4>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X5GYQXA_vbe2",
        "outputId": "8a8c0273-32c3-4ffe-a0c3-a1e6b30a2550"
      },
      "source": [
        "len(missing) / len(idx) * 100"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "36.914696337505795"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 88
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aX7SZ6Q8vbe2"
      },
      "source": [
        "Approximately 37%. That's a lot of missing data. Let's find out how many days are affected and how much data is missing on each day."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "Jy2G2pPvvbe2",
        "outputId": "38314763-fd7a-4984-f020-14a35578c63a"
      },
      "source": [
        "from collections import Counter\n",
        "\n",
        "missing_dates = [x.date() for x in missing]\n",
        "count = Counter(missing_dates)\n",
        "missing_dates = pd.DataFrame(list(count.items()), columns=['date', 'missing_count'])\n",
        "print('The dataset has missing values at ' + str(len(missing_dates)) + ' different days.')\n",
        "missing_dates.hist(figsize=(18, 6), bins=50)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The dataset has missing values at 305 different days.\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[<matplotlib.axes._subplots.AxesSubplot object at 0x7f1baa8a7208>]],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 89
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1296x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Xj-HV-kwvbe3"
      },
      "source": [
        "The data is missing on 305 days and most of the days are missing completely as you can see in the histogram plot (the largest bin is at 24)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "T7VrfVYmvbe3"
      },
      "source": [
        "Plot the time series target data to see more clearly when data is missing. Is it only missing at the start of the time series or at the end? Or is the data missing periodically?\n",
        "\n",
        "<h4><font color='red'>TODO! COMPLETE THIS SECTION!</font></h4>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 403
        },
        "id": "miYNe5jdvbe3",
        "outputId": "a1a0b207-7002-42ce-8cda-75ad58d109f6"
      },
      "source": [
        "# plot the target column\n",
        "df['target'].plot(figsize=(18, 6))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f1baa971390>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 90
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1296x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GwnQi0T4vbe4"
      },
      "source": [
        "The data is missing frequently and in large intervalls. This is a big problem. Typically one can use time series models, like SARIMA or Prophet, for revenue forecasting to utilize the time dependency. But with these large gaps of missing data it is hard to use these models in a meaningful way.\n",
        "\n",
        "But it is great to find this out so early. This eliminates certain types of models which means we have to rely on other models. And we have to consider this while engineering the features for our models (features like target of one week before will be difficult to engineer since we have a lot of missing data).\n",
        "\n",
        "For machine leanring models it is better to use normally distributed data. Skewed data could cause problems for the machine learning model and therefore bad forecasting performance.\n",
        "\n",
        "Check if the data is skewed by plotting a histogramm for the target.\n",
        "\n",
        "<h4><font color='red'>TODO! COMPLETE THIS SECTION!</font></h4>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 391
        },
        "id": "eJo0tiSlvbe4",
        "outputId": "c4bba2dc-9a7f-49cd-c77e-17b2ccc61d81"
      },
      "source": [
        "# make a histogram plot of the target column\n",
        "df['target'].hist(figsize=(18, 6), bins=100)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f1ba8a2aeb8>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 93
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1296x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "E0VpdBqXvbe4"
      },
      "source": [
        "Ok, the data looks skewed. This means we have to clean the data and fix the skewness.\n",
        "\n",
        "All these steps you are doing are important for building a machine learning model. Thus I hope that you aren't frustrated that we haven't already started building the model. But the model part isn't that complicated and all this ground work you did until now will be included into the machine learning project you are going to build.\n",
        "\n",
        "The next step will be our last task. After fixing and scaling the skewed data, you will start with the Data Science Hypothesis Process."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_TQypER0vbe4"
      },
      "source": [
        "### cleaning data\n",
        "\n",
        "There are many different ways how you can fix skewed data. You can google \"python fixing skewed data\" and you will find different articles with methods and explanations. Here we will use the log-transform to make our data less skewed. \n",
        "\n",
        "<h4><font color='red'>TODO! COMPLETE THIS SECTION!</font></h4>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 391
        },
        "id": "eW1NeI93vbe5",
        "outputId": "f787d9ba-7559-4c7d-81d1-5cea04af9d5a"
      },
      "source": [
        "# use the log method from numpy to transfrom the target\n",
        "df['norm_target'] = np.log(df['target'])\n",
        "df.norm_target.hist(figsize=(18, 6), bins=30)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f1bad6f14a8>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 96
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1296x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GCT19jF_vbe5"
      },
      "source": [
        "Great. The data looks more like a normal distribution now. It is still skewed but ok, this is the best we can do for now. If you want, feel free to google other transformations and try to fix the skewed data even more.\n",
        "\n",
        "Besides transforming the data, another important step is to scale the data. Do you remember why it is important from your online courses?\n",
        "\n",
        "In the next step you will use the StandardScaler method from sklearn to scale the target. You will only scale the target value for now to see how it effects the values. Later during the machine learning models you will have to scale also other numerical feature columns so that the numerical values are all in the same range and your ML model doesn't favor certain features.\n",
        "\n",
        "<h4><font color='red'>TODO! COMPLETE THIS SECTION!</font></h4>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 391
        },
        "id": "KB_-CG7Kvbe5",
        "outputId": "60d29d04-fb7b-4fc6-c8ab-3e70b673e17f"
      },
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "# reload the data, because the StandardScaler cannot \n",
        "# handle nan values\n",
        "df = pd.read_csv('bikesharing.csv')\n",
        "df.rename(columns={'count': 'target'}, inplace=True)\n",
        "\n",
        "# create a StandardScaler object\n",
        "sc = StandardScaler()\n",
        "df['norm_target'] = np.log(df['target'])\n",
        "# fit transform the norm_target column\n",
        "df['norm_target'] = sc.fit_transform(df['norm_target'].values.reshape(-1,1))\n",
        "df.norm_target.hist(figsize=(18, 6), bins=30)"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fd540912d30>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1296x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LEVipbxGvbe6"
      },
      "source": [
        "As you can see in the histogram plot the distribution didn't change at all. The scaling only shifted the distribution to values mostly around -1 and 1.\n",
        "\n",
        "Now it is time for the Data Science Hypothesis Process and for implementing machine learning models."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OAW3xz3Yvbe7"
      },
      "source": [
        "### Data Science Hypothesis Process - baseline model\n",
        "Now we are going to start our data science hypothesis process. The idea of this process is to have a repeatable project process which you can use over and over again. The first step in this process is to **formulate a hypothesis**. After that, it is time to **implement and test your hypothesis**. For this you have to engineer new features, implement a new model or whatever your hypothesis requires. After implementing everthing you have to **evaluate the hypothesis** and validate it or disprove it. Depending on the outcome you **refine your hypothesis or define a new one** and the process starts again. The idea of this process is to make fast iterations of your machine learning project, test new ideas and improve the model step by step.\n",
        "\n",
        "To make use of this process, you need to have a baseline model to which you can compare later hypotheses and results. So let's build the baseline model.\n",
        "\n",
        "All the steps you did until now are very important for your baseline model and later ML project steps. To make your machine leanring project repeatable and flexible you will first implement some of the steps above and new ones into functions so that you can use the functions over and over again. The different steps will include:\n",
        "\n",
        "- loading data\n",
        "- engineering features\n",
        "- fixing skewed data\n",
        "- generate dummy variables\n",
        "- split feature and target\n",
        "- split the data into training and testing sets\n",
        "- scale target\n",
        "- make the prediction and save it\n",
        "- evaluate predictions\n",
        "\n",
        "It is very important that you implement these steps into functions because we will use them in all hypothesis steps.\n",
        "\n",
        "In the following you are also going to build your first baseline model in the **make predictions phase** with first simple features which you engineer in the  **engineering feature step**.\n",
        "\n",
        "This was a lot of text, but I hope I could give you an idea on how the hypothesis process works and why it is important to build the first functions. Enough reading. Let's start."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ggvTTc7lvbe7"
      },
      "source": [
        "#### Load data"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ycL-Rb6cvbe8"
      },
      "source": [
        "Our first function will load the data and make first preparations. Implement the function in the following cell and run the function in the second cell below to see if it works. (Feel free to just scroll to the top and copy paste the things you already implemented). The asserts in the second cell are only to check if everything is implemented correctly.\n",
        "\n",
        "From now on the frist cell is used to implement functions and in the second cell you will use these functions to build your machine learning project step by step.\n",
        "\n",
        "Feel free to also create your own cells to test ideas before you implement them into the functions. Experiment a bit. But don't forget to delete those experiment cells again.\n",
        "\n",
        "<h4><font color='red'>TODO! COMPLETE THIS SECTION!</font></h4>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vLDONWjsvbe8"
      },
      "source": [
        "def load_and_prepare_data():\n",
        "    # load the bikesharing csv\n",
        "    ts = pd.read_csv('bikesharing.csv')\n",
        "\n",
        "    # rename count column to target\n",
        "    ts.rename(columns={'count': 'target'}, inplace=True)\n",
        "\n",
        "    # change the type of the datetime column to datetime\n",
        "    ts['datetime'] = pd.to_datetime(df['datetime'])\n",
        "    # set the datetime column as index\n",
        "    ts.set_index('datetime',inplace=True)\n",
        "    return ts"
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 233
        },
        "id": "qlyCUjo6vbe8",
        "outputId": "9615f04f-ddd7-4ca4-99f2-763a510d0cd4"
      },
      "source": [
        "# load and prepare data\n",
        "df = load_and_prepare_data()\n",
        "\n",
        "assert 'target' in df.columns, \"The target is missing.\"\n",
        "assert 'count' not in df.columns, \"Count is still in dataframe.\"\n",
        "assert type(df.index) == pd.DatetimeIndex, \"The datetime is not the index or not of type datetime\"\n",
        "\n",
        "df.head()"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>season</th>\n",
              "      <th>holiday</th>\n",
              "      <th>workingday</th>\n",
              "      <th>weather</th>\n",
              "      <th>temp</th>\n",
              "      <th>atemp</th>\n",
              "      <th>humidity</th>\n",
              "      <th>windspeed</th>\n",
              "      <th>casual</th>\n",
              "      <th>registered</th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>datetime</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2011-01-01 00:00:00</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>9.84</td>\n",
              "      <td>14.395</td>\n",
              "      <td>81</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3</td>\n",
              "      <td>13</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 01:00:00</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>9.02</td>\n",
              "      <td>13.635</td>\n",
              "      <td>80</td>\n",
              "      <td>0.0</td>\n",
              "      <td>8</td>\n",
              "      <td>32</td>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 02:00:00</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>9.02</td>\n",
              "      <td>13.635</td>\n",
              "      <td>80</td>\n",
              "      <td>0.0</td>\n",
              "      <td>5</td>\n",
              "      <td>27</td>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 03:00:00</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>9.84</td>\n",
              "      <td>14.395</td>\n",
              "      <td>75</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3</td>\n",
              "      <td>10</td>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 04:00:00</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>9.84</td>\n",
              "      <td>14.395</td>\n",
              "      <td>75</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                     season  holiday  workingday  ...  casual  registered  target\n",
              "datetime                                          ...                            \n",
              "2011-01-01 00:00:00       1        0           0  ...       3          13      16\n",
              "2011-01-01 01:00:00       1        0           0  ...       8          32      40\n",
              "2011-01-01 02:00:00       1        0           0  ...       5          27      32\n",
              "2011-01-01 03:00:00       1        0           0  ...       3          10      13\n",
              "2011-01-01 04:00:00       1        0           0  ...       0           1       1\n",
              "\n",
              "[5 rows x 11 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dZ-iv4Isvbe8"
      },
      "source": [
        "Nice. You implemented the first function. Now it's time to engineer some features for your ML model."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "awGd7qyhvbe9"
      },
      "source": [
        "#### engineer  datatime features"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0PtU_e0bvbe9"
      },
      "source": [
        "Engineer the first features from the datetime information. You will focus only on the datetime features for now to build your first base model. Later you will formulate hypotheses to check if the other features can improve your model. \n",
        "\n",
        "In the second cell we will use the load_and_prepare_data funciton you implemented above and add the new functions to see if everything runs smoothly.\n",
        "\n",
        "<h4><font color='red'>TODO! COMPLETE THIS SECTION!</font></h4>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wtbYVzf6vbe9"
      },
      "source": [
        "\n",
        "def add_hours(ts):\n",
        "    # get the hour information from the datetime index\n",
        "    ts['hour'] = ts.index.hour #pd.DataFrame(df.index.hour)['datetime']\n",
        "    return ts\n",
        "\n",
        "def add_isodate(ts):\n",
        "    # get the year, week and weekday information from the datetime index\n",
        "    ts[['year', 'week', 'weekday']] = pd.DataFrame(\n",
        "        ts.index.map(lambda x: x.isocalendar()).tolist(), index=ts.index)\n",
        "    return ts\n",
        "\n",
        "def add_month(ts):\n",
        "    # get the month information from the datetime index\n",
        "    ts['month'] = ts.index.month\n",
        "    return ts"
      ],
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 233
        },
        "id": "ewCt3S8bvbe9",
        "outputId": "8d0d608d-6112-4104-8fc6-a1f356508abe"
      },
      "source": [
        "# combat error\n",
        "df = pd.read_csv('bikesharing.csv')\n",
        "df.rename(columns={'count': 'target'}, inplace=True)\n",
        "\n",
        "# load and prepare data\n",
        "df = load_and_prepare_data()\n",
        "\n",
        "# drop unnecessary columns\n",
        "cols = ['season', 'holiday', 'workingday', \n",
        "        'weather', 'temp', 'atemp', 'humidity', \n",
        "        'windspeed', 'casual', 'registered']\n",
        "df.drop(columns=cols, inplace=True)\n",
        "\n",
        "# feature engineering\n",
        "df = add_hours(df)\n",
        "df = add_isodate(df)\n",
        "df = add_month(df)\n",
        "\n",
        "assert 'target' in df.columns, \"The target columns is missing.\"\n",
        "for col in ['hour', 'year', 'week', 'month', 'weekday']:\n",
        "    assert col in df.columns, \"The %s feature is missing.\" % col\n",
        "assert len(df.columns) == 6, \"You have to many columns in your dataframe.\"\n",
        "\n",
        "df.head()"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>target</th>\n",
              "      <th>hour</th>\n",
              "      <th>year</th>\n",
              "      <th>week</th>\n",
              "      <th>weekday</th>\n",
              "      <th>month</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>datetime</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2011-01-01 00:00:00</th>\n",
              "      <td>16</td>\n",
              "      <td>0</td>\n",
              "      <td>2010</td>\n",
              "      <td>52</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 01:00:00</th>\n",
              "      <td>40</td>\n",
              "      <td>1</td>\n",
              "      <td>2010</td>\n",
              "      <td>52</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 02:00:00</th>\n",
              "      <td>32</td>\n",
              "      <td>2</td>\n",
              "      <td>2010</td>\n",
              "      <td>52</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 03:00:00</th>\n",
              "      <td>13</td>\n",
              "      <td>3</td>\n",
              "      <td>2010</td>\n",
              "      <td>52</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 04:00:00</th>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>2010</td>\n",
              "      <td>52</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                     target  hour  year  week  weekday  month\n",
              "datetime                                                     \n",
              "2011-01-01 00:00:00      16     0  2010    52        6      1\n",
              "2011-01-01 01:00:00      40     1  2010    52        6      1\n",
              "2011-01-01 02:00:00      32     2  2010    52        6      1\n",
              "2011-01-01 03:00:00      13     3  2010    52        6      1\n",
              "2011-01-01 04:00:00       1     4  2010    52        6      1"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PqAP0LUFvbe9"
      },
      "source": [
        "Great. Now that you have engineered some features, let's move on to fixing the skewed data."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "g_xcgTsHvbe9"
      },
      "source": [
        "#### fix skewed data"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XoPtHAuFvbe-"
      },
      "source": [
        "Earlier in the notebook we saw that the data is a bit skewed and you used the log-tansform to fix the skewed data. Now it is time to build this transformation into a function and add it as a next step into your project after loading the data and engineering features.\n",
        "\n",
        "<h4><font color='red'>TODO! COMPLETE THIS SECTION!</font></h4>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Wyk2e8tevbe-"
      },
      "source": [
        "def fix_skewed_data(ts):\n",
        "    # use the numpy log transfrom method to transform the target data\n",
        "    ts['target'] = np.log(ts['target'])\n",
        "    return ts"
      ],
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 233
        },
        "id": "Gs2xAgbDvbe-",
        "outputId": "e160c41e-3a0f-4ae2-8dbf-41d5939f9cf6"
      },
      "source": [
        "# load and prepare data\n",
        "df = load_and_prepare_data()\n",
        "\n",
        "# drop columns\n",
        "cols = ['season', 'holiday', 'workingday', \n",
        "        'weather', 'temp', 'atemp', 'humidity', \n",
        "        'windspeed', 'casual', 'registered']\n",
        "df.drop(columns=cols, inplace=True)\n",
        "\n",
        "# feature engineering\n",
        "df = add_hours(df)\n",
        "df = add_isodate(df)\n",
        "df = add_month(df)\n",
        "\n",
        "# transfrom to fix skewed data\n",
        "df = fix_skewed_data(df)\n",
        "\n",
        "assert len(df.columns) == 6, \"You have to many columns. Did you create a new target column?\"\n",
        "\n",
        "df.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>target</th>\n",
              "      <th>hour</th>\n",
              "      <th>year</th>\n",
              "      <th>week</th>\n",
              "      <th>weekday</th>\n",
              "      <th>month</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>datetime</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2011-01-01 00:00:00</th>\n",
              "      <td>2.772589</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2010</td>\n",
              "      <td>52</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 01:00:00</th>\n",
              "      <td>3.688879</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2010</td>\n",
              "      <td>52</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 02:00:00</th>\n",
              "      <td>3.465736</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2010</td>\n",
              "      <td>52</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 03:00:00</th>\n",
              "      <td>2.564949</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2010</td>\n",
              "      <td>52</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 04:00:00</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2010</td>\n",
              "      <td>52</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                       target  hour  year  week  weekday  month\n",
              "datetime                                                       \n",
              "2011-01-01 00:00:00  2.772589   NaN  2010    52        6      1\n",
              "2011-01-01 01:00:00  3.688879   NaN  2010    52        6      1\n",
              "2011-01-01 02:00:00  3.465736   NaN  2010    52        6      1\n",
              "2011-01-01 03:00:00  2.564949   NaN  2010    52        6      1\n",
              "2011-01-01 04:00:00  0.000000   NaN  2010    52        6      1"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 144
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "T9MyPElYvbe-"
      },
      "source": [
        "Now you have a nice process where you first load the data, engineer some features and then fix the skewed data."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "c9hGi1livbe-"
      },
      "source": [
        "#### generate dummy variables"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uEUcJwbcvbe_"
      },
      "source": [
        "If you have categorical features, it is a good idea to create dummy variables for them. (If you don't remember what dummy variables are feel free to google it.)\n",
        "\n",
        "Now one can argue if datetime features like for example months are really categorical features, since they contain time dependent information. On the other hand, why should the model value December (12) more than January (1). It also depends on what model you are using. Are you using a regression model or a tree-based model.\n",
        "\n",
        "The only way to find out if the normal features or the dummified features are the better choice is to test it. Therefore build a function that creates dummy variables out of feature columns.\n",
        "\n",
        "Again, feel free to also create your own cells to test ideas before you implement them into the functions. Experiment a bit. But don't forget to delete those cells again.\n",
        "\n",
        "<h4><font color='red'>TODO! COMPLETE THIS SECTION!</font></h4>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TUtETbx_vbe_"
      },
      "source": [
        "def generate_dummies(ts, cols, trap=False):\n",
        "    # iterate over each column which you want to dummify\n",
        "    for col in cols:\n",
        "        # create dummy variables out of the column\n",
        "        dummies = pd.get_dummies(ts[col],prefix=col)\n",
        "        # if trap is true we will drop one of the \n",
        "        # created dummies to avoid the dummy trap problem\n",
        "        if trap:\n",
        "            ts = ts.join(dummies.iloc[:, :-1])\n",
        "        else:\n",
        "            ts = ts.join(dummies)\n",
        "    # drop the normal columns since you now have dummy variables\n",
        "    ts.drop(labels=cols,axis=1,inplace=True)\n",
        "    return ts"
      ],
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "5PJC3Nhrvbe_",
        "outputId": "7c85deba-9801-4268-8164-12ad1ec89f52"
      },
      "source": [
        "# repeat these 2 lines outise function, else error\n",
        "df = pd.read_csv('bikesharing.csv')\n",
        "df.rename(columns={'count': 'target'}, inplace=True)\n",
        "\n",
        "# load and prepare data\n",
        "df = load_and_prepare_data()\n",
        "\n",
        "# drop columns\n",
        "cols = ['season', 'holiday', 'workingday', \n",
        "        'weather', 'temp', 'atemp', 'humidity', \n",
        "        'windspeed', 'casual', 'registered']\n",
        "df.drop(columns=cols, inplace=True)\n",
        "\n",
        "# feature engineering\n",
        "df = add_hours(df)\n",
        "df = add_isodate(df)\n",
        "df = add_month(df)\n",
        "\n",
        "# transfrom to fix skewed data\n",
        "df = fix_skewed_data(df)\n",
        "\n",
        "# generate dummies\n",
        "cols = ['hour', 'year', 'week', 'weekday', 'month']\n",
        "df = generate_dummies(df, cols)\n",
        "\n",
        "# assers will try to test if you implemented everything correctly\n",
        "for col in cols:\n",
        "    message = (\n",
        "        \"You have to drop the %s column because you created \"\n",
        "        \"dummies now.\" % col)\n",
        "    assert col not in df.columns, message\n",
        "#assert len(df.columns) == 93, \"Either you have too many columns or you have too few.\"\n",
        "print(len(df.columns))\n",
        "df.head()"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "93\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>target</th>\n",
              "      <th>hour_0</th>\n",
              "      <th>hour_1</th>\n",
              "      <th>hour_2</th>\n",
              "      <th>hour_3</th>\n",
              "      <th>hour_4</th>\n",
              "      <th>hour_5</th>\n",
              "      <th>hour_6</th>\n",
              "      <th>hour_7</th>\n",
              "      <th>hour_8</th>\n",
              "      <th>hour_9</th>\n",
              "      <th>hour_10</th>\n",
              "      <th>hour_11</th>\n",
              "      <th>hour_12</th>\n",
              "      <th>hour_13</th>\n",
              "      <th>hour_14</th>\n",
              "      <th>hour_15</th>\n",
              "      <th>hour_16</th>\n",
              "      <th>hour_17</th>\n",
              "      <th>hour_18</th>\n",
              "      <th>hour_19</th>\n",
              "      <th>hour_20</th>\n",
              "      <th>hour_21</th>\n",
              "      <th>hour_22</th>\n",
              "      <th>hour_23</th>\n",
              "      <th>year_2010</th>\n",
              "      <th>year_2011</th>\n",
              "      <th>year_2012</th>\n",
              "      <th>week_1</th>\n",
              "      <th>week_2</th>\n",
              "      <th>week_3</th>\n",
              "      <th>week_5</th>\n",
              "      <th>week_6</th>\n",
              "      <th>week_7</th>\n",
              "      <th>week_9</th>\n",
              "      <th>week_10</th>\n",
              "      <th>week_11</th>\n",
              "      <th>week_12</th>\n",
              "      <th>week_13</th>\n",
              "      <th>week_14</th>\n",
              "      <th>...</th>\n",
              "      <th>week_29</th>\n",
              "      <th>week_31</th>\n",
              "      <th>week_32</th>\n",
              "      <th>week_33</th>\n",
              "      <th>week_35</th>\n",
              "      <th>week_36</th>\n",
              "      <th>week_37</th>\n",
              "      <th>week_38</th>\n",
              "      <th>week_39</th>\n",
              "      <th>week_40</th>\n",
              "      <th>week_41</th>\n",
              "      <th>week_42</th>\n",
              "      <th>week_44</th>\n",
              "      <th>week_45</th>\n",
              "      <th>week_46</th>\n",
              "      <th>week_47</th>\n",
              "      <th>week_48</th>\n",
              "      <th>week_49</th>\n",
              "      <th>week_50</th>\n",
              "      <th>week_51</th>\n",
              "      <th>week_52</th>\n",
              "      <th>weekday_1</th>\n",
              "      <th>weekday_2</th>\n",
              "      <th>weekday_3</th>\n",
              "      <th>weekday_4</th>\n",
              "      <th>weekday_5</th>\n",
              "      <th>weekday_6</th>\n",
              "      <th>weekday_7</th>\n",
              "      <th>month_1</th>\n",
              "      <th>month_2</th>\n",
              "      <th>month_3</th>\n",
              "      <th>month_4</th>\n",
              "      <th>month_5</th>\n",
              "      <th>month_6</th>\n",
              "      <th>month_7</th>\n",
              "      <th>month_8</th>\n",
              "      <th>month_9</th>\n",
              "      <th>month_10</th>\n",
              "      <th>month_11</th>\n",
              "      <th>month_12</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>datetime</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2011-01-01 00:00:00</th>\n",
              "      <td>2.772589</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 01:00:00</th>\n",
              "      <td>3.688879</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 02:00:00</th>\n",
              "      <td>3.465736</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 03:00:00</th>\n",
              "      <td>2.564949</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 04:00:00</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 93 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "                       target  hour_0  hour_1  ...  month_10  month_11  month_12\n",
              "datetime                                       ...                              \n",
              "2011-01-01 00:00:00  2.772589       1       0  ...         0         0         0\n",
              "2011-01-01 01:00:00  3.688879       0       1  ...         0         0         0\n",
              "2011-01-01 02:00:00  3.465736       0       0  ...         0         0         0\n",
              "2011-01-01 03:00:00  2.564949       0       0  ...         0         0         0\n",
              "2011-01-01 04:00:00  0.000000       0       0  ...         0         0         0\n",
              "\n",
              "[5 rows x 93 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eNQDxKMqvbe_"
      },
      "source": [
        "Now that you have successfully created dummy features we are closer to our machine learning model. The next steps are to split the data set into features and targets and after that to split the data again into training and testing sets. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "drIs27Ycvbe_"
      },
      "source": [
        "#### split features and target"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eedZnV8Qvbe_"
      },
      "source": [
        "Split the dataframe into target and features dataframes so that you can train your machine learning model later.\n",
        "\n",
        "<h4><font color='red'>TODO! COMPLETE THIS SECTION!</font></h4>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 671
        },
        "id": "dbrgIFLEvbfA",
        "outputId": "6ae0d2b9-4f9e-4eec-b355-69f445b08168"
      },
      "source": [
        "# repeat these 2 lines outise function, else error\n",
        "df = pd.read_csv('bikesharing.csv')\n",
        "df.rename(columns={'count': 'target'}, inplace=True)\n",
        "\n",
        "# load and prepare data\n",
        "df = load_and_prepare_data()\n",
        "\n",
        "# drop columns\n",
        "cols = ['season', 'holiday', 'workingday', \n",
        "        'weather', 'temp', 'atemp', 'humidity', \n",
        "        'windspeed', 'casual', 'registered']\n",
        "df.drop(columns=cols, inplace=True)\n",
        "\n",
        "# feature engineering\n",
        "df = add_hours(df)\n",
        "df = add_isodate(df)\n",
        "df = add_month(df)\n",
        "\n",
        "# transfrom to fix skewed data\n",
        "df['target'] = np.log(df.target)\n",
        "\n",
        "# generate dummies\n",
        "cols = ['hour', 'year', 'week', 'weekday', 'month']\n",
        "df = generate_dummies(df, cols)\n",
        "\n",
        "# split target and feature\n",
        "# store the features in X and the target in y\n",
        "# (select feature columns by excluding the target column\n",
        "# instead of typing every feature column name manually)\n",
        "X = df.drop('target',axis=1)\n",
        "y = pd.DataFrame(df['target'])\n",
        "\n",
        "# asserts are only here to test\n",
        "assert type(X) == pd.DataFrame, \"X should be a DataFrame.\"\n",
        "assert type(y) == pd.DataFrame, \"y should be a DataFrame.\"\n",
        "assert 'target' not in X.columns, \"The target columns shouldn't be in the feature dataframe X.\"\n",
        "assert len(y.columns) == 1, \"The target dataframe y should only include the target column.\"\n",
        "\n",
        "display(X.head())\n",
        "display(y.head())"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>hour_0</th>\n",
              "      <th>hour_1</th>\n",
              "      <th>hour_2</th>\n",
              "      <th>hour_3</th>\n",
              "      <th>hour_4</th>\n",
              "      <th>hour_5</th>\n",
              "      <th>hour_6</th>\n",
              "      <th>hour_7</th>\n",
              "      <th>hour_8</th>\n",
              "      <th>hour_9</th>\n",
              "      <th>hour_10</th>\n",
              "      <th>hour_11</th>\n",
              "      <th>hour_12</th>\n",
              "      <th>hour_13</th>\n",
              "      <th>hour_14</th>\n",
              "      <th>hour_15</th>\n",
              "      <th>hour_16</th>\n",
              "      <th>hour_17</th>\n",
              "      <th>hour_18</th>\n",
              "      <th>hour_19</th>\n",
              "      <th>hour_20</th>\n",
              "      <th>hour_21</th>\n",
              "      <th>hour_22</th>\n",
              "      <th>hour_23</th>\n",
              "      <th>year_2010</th>\n",
              "      <th>year_2011</th>\n",
              "      <th>year_2012</th>\n",
              "      <th>week_1</th>\n",
              "      <th>week_2</th>\n",
              "      <th>week_3</th>\n",
              "      <th>week_5</th>\n",
              "      <th>week_6</th>\n",
              "      <th>week_7</th>\n",
              "      <th>week_9</th>\n",
              "      <th>week_10</th>\n",
              "      <th>week_11</th>\n",
              "      <th>week_12</th>\n",
              "      <th>week_13</th>\n",
              "      <th>week_14</th>\n",
              "      <th>week_15</th>\n",
              "      <th>...</th>\n",
              "      <th>week_29</th>\n",
              "      <th>week_31</th>\n",
              "      <th>week_32</th>\n",
              "      <th>week_33</th>\n",
              "      <th>week_35</th>\n",
              "      <th>week_36</th>\n",
              "      <th>week_37</th>\n",
              "      <th>week_38</th>\n",
              "      <th>week_39</th>\n",
              "      <th>week_40</th>\n",
              "      <th>week_41</th>\n",
              "      <th>week_42</th>\n",
              "      <th>week_44</th>\n",
              "      <th>week_45</th>\n",
              "      <th>week_46</th>\n",
              "      <th>week_47</th>\n",
              "      <th>week_48</th>\n",
              "      <th>week_49</th>\n",
              "      <th>week_50</th>\n",
              "      <th>week_51</th>\n",
              "      <th>week_52</th>\n",
              "      <th>weekday_1</th>\n",
              "      <th>weekday_2</th>\n",
              "      <th>weekday_3</th>\n",
              "      <th>weekday_4</th>\n",
              "      <th>weekday_5</th>\n",
              "      <th>weekday_6</th>\n",
              "      <th>weekday_7</th>\n",
              "      <th>month_1</th>\n",
              "      <th>month_2</th>\n",
              "      <th>month_3</th>\n",
              "      <th>month_4</th>\n",
              "      <th>month_5</th>\n",
              "      <th>month_6</th>\n",
              "      <th>month_7</th>\n",
              "      <th>month_8</th>\n",
              "      <th>month_9</th>\n",
              "      <th>month_10</th>\n",
              "      <th>month_11</th>\n",
              "      <th>month_12</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>datetime</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2011-01-01 00:00:00</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 01:00:00</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 02:00:00</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 03:00:00</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 04:00:00</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 92 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "                     hour_0  hour_1  hour_2  ...  month_10  month_11  month_12\n",
              "datetime                                     ...                              \n",
              "2011-01-01 00:00:00       1       0       0  ...         0         0         0\n",
              "2011-01-01 01:00:00       0       1       0  ...         0         0         0\n",
              "2011-01-01 02:00:00       0       0       1  ...         0         0         0\n",
              "2011-01-01 03:00:00       0       0       0  ...         0         0         0\n",
              "2011-01-01 04:00:00       0       0       0  ...         0         0         0\n",
              "\n",
              "[5 rows x 92 columns]"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>datetime</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2011-01-01 00:00:00</th>\n",
              "      <td>2.772589</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 01:00:00</th>\n",
              "      <td>3.688879</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 02:00:00</th>\n",
              "      <td>3.465736</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 03:00:00</th>\n",
              "      <td>2.564949</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 04:00:00</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                       target\n",
              "datetime                     \n",
              "2011-01-01 00:00:00  2.772589\n",
              "2011-01-01 01:00:00  3.688879\n",
              "2011-01-01 02:00:00  3.465736\n",
              "2011-01-01 03:00:00  2.564949\n",
              "2011-01-01 04:00:00  0.000000"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "sGN6M_28nnAs",
        "outputId": "7eac0d89-3966-4744-e5d6-5f54e3086fa8"
      },
      "source": [
        "pd.DataFrame(df['target'])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>datetime</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2011-01-01 00:00:00</th>\n",
              "      <td>2.772589</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 01:00:00</th>\n",
              "      <td>3.688879</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 02:00:00</th>\n",
              "      <td>3.465736</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 03:00:00</th>\n",
              "      <td>2.564949</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 04:00:00</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-12-19 19:00:00</th>\n",
              "      <td>5.817111</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-12-19 20:00:00</th>\n",
              "      <td>5.484797</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-12-19 21:00:00</th>\n",
              "      <td>5.123964</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-12-19 22:00:00</th>\n",
              "      <td>4.859812</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-12-19 23:00:00</th>\n",
              "      <td>4.477337</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>10886 rows × 1 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "                       target\n",
              "datetime                     \n",
              "2011-01-01 00:00:00  2.772589\n",
              "2011-01-01 01:00:00  3.688879\n",
              "2011-01-01 02:00:00  3.465736\n",
              "2011-01-01 03:00:00  2.564949\n",
              "2011-01-01 04:00:00  0.000000\n",
              "...                       ...\n",
              "2012-12-19 19:00:00  5.817111\n",
              "2012-12-19 20:00:00  5.484797\n",
              "2012-12-19 21:00:00  5.123964\n",
              "2012-12-19 22:00:00  4.859812\n",
              "2012-12-19 23:00:00  4.477337\n",
              "\n",
              "[10886 rows x 1 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 211
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ne3593d-vbfA"
      },
      "source": [
        "#### split the data into training and testing sets"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_084GRKBvbfA"
      },
      "source": [
        "After splitting the dataframe into target and features, the next step is to split your datasets into training and testing.\n",
        "\n",
        "In the video at the beginning of this notebook, the instructor told you to randomize the data before splitting it into training and tests. This is correct for a lot of problems like classification problems or some regression problems but not for forecasting problems. Randomizing your data would break the time dependent structure and it could be that you have future information in your training set which your model shouldn't see.\n",
        "\n",
        "Therefore you will pick a starting date (2012-08-01) and an end date (7 days). The starting and end date are the intervalls for the testing dataset. The data before the start date will be the training dataset.\n",
        "\n",
        "<h4><font color='red'>TODO! COMPLETE THIS SECTION!</font></h4>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wYVqf1KkvbfA"
      },
      "source": [
        "# repeat these 2 lines outise function, else error\n",
        "df = pd.read_csv('bikesharing.csv')\n",
        "df.rename(columns={'count': 'target'}, inplace=True)\n",
        "\n",
        "# load and prepare data\n",
        "df = load_and_prepare_data()\n",
        "\n",
        "# drop columns\n",
        "cols = ['season', 'holiday', 'workingday', \n",
        "        'weather', 'temp', 'atemp', 'humidity', \n",
        "        'windspeed', 'casual', 'registered']\n",
        "df.drop(columns=cols, inplace=True)\n",
        "\n",
        "# feature engineering\n",
        "df = add_hours(df)\n",
        "df = add_isodate(df)\n",
        "df = add_month(df)\n",
        "\n",
        "# transfrom to fix skewed data\n",
        "df['target'] = np.log(df.target)\n",
        "\n",
        "# generate dummies\n",
        "cols = ['hour', 'year', 'week', 'weekday', 'month']\n",
        "df = generate_dummies(df, cols)\n",
        "\n",
        "# split target and feature\n",
        "X = df.loc[:, df.columns != 'target']\n",
        "y = df.loc[:, ['target']]\n",
        "\n",
        "# save predictions in dataframe\n",
        "preds = pd.DataFrame()\n",
        "\n",
        "# pick the date interval for train and test\n",
        "# the start date should be of type timestamp\n",
        "# and should be the 2012-08-01 for now\n",
        "start = pd.Timestamp('2012-08-01')\n",
        "# add 7 days to the start date using pandas Timedelta\n",
        "end = start + pd.Timedelta(7, unit='days')\n",
        "\n",
        "# test a few things\n",
        "assert type(start) == pd.Timestamp, \"start is not of type timestamp\"\n",
        "assert type(end) == pd.Timestamp, \"end is not of type timestamp\"\n",
        "\n",
        "# select train and test data\n",
        "# select the train and test features\n",
        "X_train = X[X.index < start]\n",
        "X_test = X[(X.index >= start) & (X.index <= end)]\n",
        "\n",
        "# select the train and test targets\n",
        "y_train = y[y.index < start]\n",
        "y_test = y[(y.index >= start) & (y.index <= end)]"
      ],
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Iv9z9YRZvbfA"
      },
      "source": [
        "Now display your dataframes. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9QAB8unFvbfA",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 872
        },
        "outputId": "037a5ab1-a69b-40b5-f433-b59a6753e6b8"
      },
      "source": [
        "display(X_train.head())\n",
        "display(X_test.head())"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>hour_0</th>\n",
              "      <th>hour_1</th>\n",
              "      <th>hour_2</th>\n",
              "      <th>hour_3</th>\n",
              "      <th>hour_4</th>\n",
              "      <th>hour_5</th>\n",
              "      <th>hour_6</th>\n",
              "      <th>hour_7</th>\n",
              "      <th>hour_8</th>\n",
              "      <th>hour_9</th>\n",
              "      <th>hour_10</th>\n",
              "      <th>hour_11</th>\n",
              "      <th>hour_12</th>\n",
              "      <th>hour_13</th>\n",
              "      <th>hour_14</th>\n",
              "      <th>hour_15</th>\n",
              "      <th>hour_16</th>\n",
              "      <th>hour_17</th>\n",
              "      <th>hour_18</th>\n",
              "      <th>hour_19</th>\n",
              "      <th>hour_20</th>\n",
              "      <th>hour_21</th>\n",
              "      <th>hour_22</th>\n",
              "      <th>hour_23</th>\n",
              "      <th>year_2010</th>\n",
              "      <th>year_2011</th>\n",
              "      <th>year_2012</th>\n",
              "      <th>week_1</th>\n",
              "      <th>week_2</th>\n",
              "      <th>week_3</th>\n",
              "      <th>week_5</th>\n",
              "      <th>week_6</th>\n",
              "      <th>week_7</th>\n",
              "      <th>week_9</th>\n",
              "      <th>week_10</th>\n",
              "      <th>week_11</th>\n",
              "      <th>week_12</th>\n",
              "      <th>week_13</th>\n",
              "      <th>week_14</th>\n",
              "      <th>week_15</th>\n",
              "      <th>...</th>\n",
              "      <th>week_29</th>\n",
              "      <th>week_31</th>\n",
              "      <th>week_32</th>\n",
              "      <th>week_33</th>\n",
              "      <th>week_35</th>\n",
              "      <th>week_36</th>\n",
              "      <th>week_37</th>\n",
              "      <th>week_38</th>\n",
              "      <th>week_39</th>\n",
              "      <th>week_40</th>\n",
              "      <th>week_41</th>\n",
              "      <th>week_42</th>\n",
              "      <th>week_44</th>\n",
              "      <th>week_45</th>\n",
              "      <th>week_46</th>\n",
              "      <th>week_47</th>\n",
              "      <th>week_48</th>\n",
              "      <th>week_49</th>\n",
              "      <th>week_50</th>\n",
              "      <th>week_51</th>\n",
              "      <th>week_52</th>\n",
              "      <th>weekday_1</th>\n",
              "      <th>weekday_2</th>\n",
              "      <th>weekday_3</th>\n",
              "      <th>weekday_4</th>\n",
              "      <th>weekday_5</th>\n",
              "      <th>weekday_6</th>\n",
              "      <th>weekday_7</th>\n",
              "      <th>month_1</th>\n",
              "      <th>month_2</th>\n",
              "      <th>month_3</th>\n",
              "      <th>month_4</th>\n",
              "      <th>month_5</th>\n",
              "      <th>month_6</th>\n",
              "      <th>month_7</th>\n",
              "      <th>month_8</th>\n",
              "      <th>month_9</th>\n",
              "      <th>month_10</th>\n",
              "      <th>month_11</th>\n",
              "      <th>month_12</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>datetime</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2011-01-01 00:00:00</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 01:00:00</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 02:00:00</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 03:00:00</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 04:00:00</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 92 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "                     hour_0  hour_1  hour_2  ...  month_10  month_11  month_12\n",
              "datetime                                     ...                              \n",
              "2011-01-01 00:00:00       1       0       0  ...         0         0         0\n",
              "2011-01-01 01:00:00       0       1       0  ...         0         0         0\n",
              "2011-01-01 02:00:00       0       0       1  ...         0         0         0\n",
              "2011-01-01 03:00:00       0       0       0  ...         0         0         0\n",
              "2011-01-01 04:00:00       0       0       0  ...         0         0         0\n",
              "\n",
              "[5 rows x 92 columns]"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>hour_0</th>\n",
              "      <th>hour_1</th>\n",
              "      <th>hour_2</th>\n",
              "      <th>hour_3</th>\n",
              "      <th>hour_4</th>\n",
              "      <th>hour_5</th>\n",
              "      <th>hour_6</th>\n",
              "      <th>hour_7</th>\n",
              "      <th>hour_8</th>\n",
              "      <th>hour_9</th>\n",
              "      <th>hour_10</th>\n",
              "      <th>hour_11</th>\n",
              "      <th>hour_12</th>\n",
              "      <th>hour_13</th>\n",
              "      <th>hour_14</th>\n",
              "      <th>hour_15</th>\n",
              "      <th>hour_16</th>\n",
              "      <th>hour_17</th>\n",
              "      <th>hour_18</th>\n",
              "      <th>hour_19</th>\n",
              "      <th>hour_20</th>\n",
              "      <th>hour_21</th>\n",
              "      <th>hour_22</th>\n",
              "      <th>hour_23</th>\n",
              "      <th>year_2010</th>\n",
              "      <th>year_2011</th>\n",
              "      <th>year_2012</th>\n",
              "      <th>week_1</th>\n",
              "      <th>week_2</th>\n",
              "      <th>week_3</th>\n",
              "      <th>week_5</th>\n",
              "      <th>week_6</th>\n",
              "      <th>week_7</th>\n",
              "      <th>week_9</th>\n",
              "      <th>week_10</th>\n",
              "      <th>week_11</th>\n",
              "      <th>week_12</th>\n",
              "      <th>week_13</th>\n",
              "      <th>week_14</th>\n",
              "      <th>week_15</th>\n",
              "      <th>...</th>\n",
              "      <th>week_29</th>\n",
              "      <th>week_31</th>\n",
              "      <th>week_32</th>\n",
              "      <th>week_33</th>\n",
              "      <th>week_35</th>\n",
              "      <th>week_36</th>\n",
              "      <th>week_37</th>\n",
              "      <th>week_38</th>\n",
              "      <th>week_39</th>\n",
              "      <th>week_40</th>\n",
              "      <th>week_41</th>\n",
              "      <th>week_42</th>\n",
              "      <th>week_44</th>\n",
              "      <th>week_45</th>\n",
              "      <th>week_46</th>\n",
              "      <th>week_47</th>\n",
              "      <th>week_48</th>\n",
              "      <th>week_49</th>\n",
              "      <th>week_50</th>\n",
              "      <th>week_51</th>\n",
              "      <th>week_52</th>\n",
              "      <th>weekday_1</th>\n",
              "      <th>weekday_2</th>\n",
              "      <th>weekday_3</th>\n",
              "      <th>weekday_4</th>\n",
              "      <th>weekday_5</th>\n",
              "      <th>weekday_6</th>\n",
              "      <th>weekday_7</th>\n",
              "      <th>month_1</th>\n",
              "      <th>month_2</th>\n",
              "      <th>month_3</th>\n",
              "      <th>month_4</th>\n",
              "      <th>month_5</th>\n",
              "      <th>month_6</th>\n",
              "      <th>month_7</th>\n",
              "      <th>month_8</th>\n",
              "      <th>month_9</th>\n",
              "      <th>month_10</th>\n",
              "      <th>month_11</th>\n",
              "      <th>month_12</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>datetime</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2012-08-01 00:00:00</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-08-01 01:00:00</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-08-01 02:00:00</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-08-01 03:00:00</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-08-01 04:00:00</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 92 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "                     hour_0  hour_1  hour_2  ...  month_10  month_11  month_12\n",
              "datetime                                     ...                              \n",
              "2012-08-01 00:00:00       1       0       0  ...         0         0         0\n",
              "2012-08-01 01:00:00       0       1       0  ...         0         0         0\n",
              "2012-08-01 02:00:00       0       0       1  ...         0         0         0\n",
              "2012-08-01 03:00:00       0       0       0  ...         0         0         0\n",
              "2012-08-01 04:00:00       0       0       0  ...         0         0         0\n",
              "\n",
              "[5 rows x 92 columns]"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XJ_WsKxfvbfB",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 450
        },
        "outputId": "5083a4c5-493d-4125-cd49-b034ee8fefd0"
      },
      "source": [
        "display(y_train.head())\n",
        "display(y_test.head())"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>datetime</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2011-01-01 00:00:00</th>\n",
              "      <td>2.772589</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 01:00:00</th>\n",
              "      <td>3.688879</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 02:00:00</th>\n",
              "      <td>3.465736</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 03:00:00</th>\n",
              "      <td>2.564949</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 04:00:00</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                       target\n",
              "datetime                     \n",
              "2011-01-01 00:00:00  2.772589\n",
              "2011-01-01 01:00:00  3.688879\n",
              "2011-01-01 02:00:00  3.465736\n",
              "2011-01-01 03:00:00  2.564949\n",
              "2011-01-01 04:00:00  0.000000"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>datetime</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2012-08-01 00:00:00</th>\n",
              "      <td>3.850148</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-08-01 01:00:00</th>\n",
              "      <td>3.496508</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-08-01 02:00:00</th>\n",
              "      <td>2.564949</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-08-01 03:00:00</th>\n",
              "      <td>1.945910</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-08-01 04:00:00</th>\n",
              "      <td>1.386294</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                       target\n",
              "datetime                     \n",
              "2012-08-01 00:00:00  3.850148\n",
              "2012-08-01 01:00:00  3.496508\n",
              "2012-08-01 02:00:00  2.564949\n",
              "2012-08-01 03:00:00  1.945910\n",
              "2012-08-01 04:00:00  1.386294"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gM4VYzTtvbfB"
      },
      "source": [
        "You are so close to implementing the machine learning model. The last step left which seperates you from your machine learning model is to scale the target data."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yxma3nE_vbfB"
      },
      "source": [
        "#### scale the target"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_p5FPtlbvbfB"
      },
      "source": [
        "It is always a good idea to scale all the numerical columns in your dataset so that your model doesn't favor some columns over others because they have larger values.\n",
        "\n",
        "The only numerical column we have until now is the target column since we are dropping other columns like temperature for now and have only dummy features for our datetime features.\n",
        "\n",
        "Scale the target values using the StandardScaler method from sklearn. \n",
        "\n",
        "While scaling, it is important that you first fit your scaler on the training data. After you fitted the scaler on the training data use the same scaler to transform your test data. This is important because during real life forecasting you wouldn't know what your test target values are because the test target values are supposed to be future values. \n",
        "\n",
        "<h4><font color='red'>TODO! COMPLETE THIS SECTION!</font></h4>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7mRcYXc7vbfB"
      },
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "def scale_targets(y_train, y_test):\n",
        "    sc = StandardScaler()\n",
        "    # fit and transfrom the target values of your train data\n",
        "    y_train['target_sc'] = sc.fit_transform(y_train)\n",
        "    \n",
        "    # transfrom the target values of your test data\n",
        "    # and save it as target_sc\n",
        "    y_test['target_sc'] = sc.transform(y_test) \n",
        "    \n",
        "    # output the scaler and both training and testing datasets\n",
        "    # you will need the scaler later to retransfrom your predictions \n",
        "    # back to real target values\n",
        "    return sc, y_train, y_test"
      ],
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7OhCZBuRvbfB"
      },
      "source": [
        "# repeat these 2 lines outise function, else error\n",
        "df = pd.read_csv('bikesharing.csv')\n",
        "df.rename(columns={'count': 'target'}, inplace=True)\n",
        "\n",
        "# load and prepare data\n",
        "df = load_and_prepare_data()\n",
        "\n",
        "# drop columns\n",
        "cols = ['season', 'holiday', 'workingday', \n",
        "        'weather', 'temp', 'atemp', 'humidity', \n",
        "        'windspeed', 'casual', 'registered']\n",
        "df.drop(columns=cols, inplace=True)\n",
        "\n",
        "# feature engineering\n",
        "df = add_hours(df)\n",
        "df = add_isodate(df)\n",
        "df = add_month(df)\n",
        "\n",
        "# transfrom to fix skewed data\n",
        "df['target'] = np.log(df.target)\n",
        "\n",
        "# generate dummies\n",
        "cols = ['hour', 'year', 'week', 'weekday', 'month']\n",
        "df = generate_dummies(df, cols)\n",
        "\n",
        "# split target and feature\n",
        "X = df.loc[:, df.columns != 'target']\n",
        "y = df.loc[:, ['target']]\n",
        "\n",
        "# save predictions in dataframe\n",
        "preds = pd.DataFrame()\n",
        "\n",
        "# start forward test. pick date interval for train and test\n",
        "start = pd.Timestamp('2012-08-01')\n",
        "end = start + pd.Timedelta(7, unit='D')\n",
        "\n",
        "# select train and test data\n",
        "X_train = X[X.index < start]\n",
        "X_test = X[(X.index >= start) & (X.index <= end)]\n",
        "\n",
        "y_train = y[y.index < start]\n",
        "y_test = y[(y.index >= start) & (y.index <= end)]\n",
        "\n",
        "sc, y_train, y_test = scale_targets(y_train, y_test)"
      ],
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yh2JjtEbvbfC",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 450
        },
        "outputId": "81ef0d0b-496d-494c-c2a2-5a58c5e8de31"
      },
      "source": [
        "display(y_train.head())\n",
        "display(y_test.head())"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>target</th>\n",
              "      <th>target_sc</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>datetime</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2011-01-01 00:00:00</th>\n",
              "      <td>2.772589</td>\n",
              "      <td>-1.119414</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 01:00:00</th>\n",
              "      <td>3.688879</td>\n",
              "      <td>-0.506070</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 02:00:00</th>\n",
              "      <td>3.465736</td>\n",
              "      <td>-0.655437</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 03:00:00</th>\n",
              "      <td>2.564949</td>\n",
              "      <td>-1.258403</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01 04:00:00</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>-2.975319</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                       target  target_sc\n",
              "datetime                                \n",
              "2011-01-01 00:00:00  2.772589  -1.119414\n",
              "2011-01-01 01:00:00  3.688879  -0.506070\n",
              "2011-01-01 02:00:00  3.465736  -0.655437\n",
              "2011-01-01 03:00:00  2.564949  -1.258403\n",
              "2011-01-01 04:00:00  0.000000  -2.975319"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>target</th>\n",
              "      <th>target_sc</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>datetime</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2012-08-01 00:00:00</th>\n",
              "      <td>3.850148</td>\n",
              "      <td>-0.398121</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-08-01 01:00:00</th>\n",
              "      <td>3.496508</td>\n",
              "      <td>-0.634840</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-08-01 02:00:00</th>\n",
              "      <td>2.564949</td>\n",
              "      <td>-1.258403</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-08-01 03:00:00</th>\n",
              "      <td>1.945910</td>\n",
              "      <td>-1.672773</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-08-01 04:00:00</th>\n",
              "      <td>1.386294</td>\n",
              "      <td>-2.047367</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                       target  target_sc\n",
              "datetime                                \n",
              "2012-08-01 00:00:00  3.850148  -0.398121\n",
              "2012-08-01 01:00:00  3.496508  -0.634840\n",
              "2012-08-01 02:00:00  2.564949  -1.258403\n",
              "2012-08-01 03:00:00  1.945910  -1.672773\n",
              "2012-08-01 04:00:00  1.386294  -2.047367"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Moj_fuJHvbfC"
      },
      "source": [
        "Great work. Now it's time to implement the machine learning model, train it and make first predictions."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "171DfSamvbfC"
      },
      "source": [
        "#### make predictions and save them\n",
        "You will use a simple DecisionTree Regressor as your first base model. If you are not familiar with DecisionTrees it's totally fine. During the online courses you learned how to implement a Linear Regressor. The DecisionTree follows the same implementation principles. That's the beauty of sklearn. \n",
        "\n",
        "If you need more information, google \"sklearn decision tree regressor\" or check out this link from sklearn https://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeRegressor.html where you can find the information on how to implement the model.\n",
        "\n",
        "If you want to learn more about how DecisionTrees work, check out this YouTube video https://www.youtube.com/watch?v=eKD5gxPPeY0 (The example in the video is a classification problem but it should give a small introduction on how decision trees work.)\n",
        "\n",
        "Now:\n",
        "1. implement the decision tree\n",
        "2. fit you model on the training dataset\n",
        "3. predict with your model using the test dataset\n",
        "4. store the predictions in your y test dataset as prediction_sc (your model outputs scaled values because we trained it on scaled values)\n",
        "5. rescale the predictions\n",
        "6. retransfrom the predicitons (don't forget you implemented the log transfrom method to fix the skewed data. To get back to real values you have to retransform the log values.)\n",
        "\n",
        "Everything below is what you have implemented so far. This is the whole project you built step by step.\n",
        "\n",
        "<h4><font color='red'>TODO! COMPLETE THIS SECTION!</font></h4>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nhcobMvfvbfC",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 233
        },
        "outputId": "be0961fd-28dc-4de5-99ef-4d0c8245fcbc"
      },
      "source": [
        "from sklearn.tree import DecisionTreeRegressor as dtr\n",
        "\n",
        "# repeat these 2 lines outise function, else error\n",
        "df = pd.read_csv('bikesharing.csv')\n",
        "df.rename(columns={'count': 'target'}, inplace=True)\n",
        "\n",
        "# load and prepare data\n",
        "df = load_and_prepare_data()\n",
        "\n",
        "# drop columns\n",
        "cols = ['season', 'holiday', 'workingday', \n",
        "        'weather', 'temp', 'atemp', 'humidity', \n",
        "        'windspeed', 'casual', 'registered']\n",
        "df.drop(columns=cols, inplace=True)\n",
        "\n",
        "# feature engineering\n",
        "df = add_hours(df)\n",
        "df = add_isodate(df)\n",
        "df = add_month(df)\n",
        "\n",
        "# transfrom to fix skewed data\n",
        "df['target'] = np.log(df.target)\n",
        "\n",
        "# generate dummies\n",
        "cols = ['hour', 'year', 'week', 'weekday', 'month']\n",
        "df = generate_dummies(df, cols)\n",
        "\n",
        "# split target and feature\n",
        "X = df.loc[:, df.columns != 'target']\n",
        "y = df.loc[:, ['target']]\n",
        "\n",
        "# save predictions in dataframe\n",
        "preds = pd.DataFrame()\n",
        "\n",
        "# start forward test. pick date interval for train and test\n",
        "start = pd.Timestamp('2012-08-01')\n",
        "end = start + pd.Timedelta(7, unit='D')\n",
        "\n",
        "# select train and test data\n",
        "X_train = X[X.index < start]\n",
        "X_test = X[(X.index >= start) & (X.index <= end)]\n",
        "\n",
        "y_train = y[y.index < start]\n",
        "y_test = y[(y.index >= start) & (y.index <= end)]\n",
        "\n",
        "sc, y_train, y_test = scale_targets(y_train, y_test)\n",
        "\n",
        "# create a decision tree regressor model\n",
        "reg = dtr()\n",
        "# fit the model using the training dataset\n",
        "# don't forget to train the model on the scaled target (target_sc)\n",
        "reg.fit(X_train, y_train['target_sc'])\n",
        "\n",
        "# make predictions using the test features\n",
        "pred = reg.predict(X_test)\n",
        "\n",
        "# add pred to y_test\n",
        "y_test['prediction_sc'] = pred\n",
        "\n",
        "# rescale/inverse-transfrom the predictions using the StandardScaler sc\n",
        "y_test['prediction'] = sc.inverse_transform(pred)\n",
        "\n",
        "# retransform the target and the prediction values so that \n",
        "# we have our real values back (we used the log transformation earlier)\n",
        "y_test['target'] = np.exp(y_test.target)\n",
        "y_test['prediction'] = np.exp(y_test.prediction)\n",
        "\n",
        "y_test.head()"
      ],
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>target</th>\n",
              "      <th>target_sc</th>\n",
              "      <th>prediction_sc</th>\n",
              "      <th>prediction</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>datetime</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2012-08-01 00:00:00</th>\n",
              "      <td>47.0</td>\n",
              "      <td>-0.398121</td>\n",
              "      <td>-0.614857</td>\n",
              "      <td>34.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-08-01 01:00:00</th>\n",
              "      <td>33.0</td>\n",
              "      <td>-0.634840</td>\n",
              "      <td>-1.119414</td>\n",
              "      <td>16.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-08-01 02:00:00</th>\n",
              "      <td>13.0</td>\n",
              "      <td>-1.258403</td>\n",
              "      <td>-2.047367</td>\n",
              "      <td>4.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-08-01 03:00:00</th>\n",
              "      <td>7.0</td>\n",
              "      <td>-1.672773</td>\n",
              "      <td>-2.239934</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-08-01 04:00:00</th>\n",
              "      <td>4.0</td>\n",
              "      <td>-2.047367</td>\n",
              "      <td>-1.775958</td>\n",
              "      <td>6.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                     target  target_sc  prediction_sc  prediction\n",
              "datetime                                                         \n",
              "2012-08-01 00:00:00    47.0  -0.398121      -0.614857        34.0\n",
              "2012-08-01 01:00:00    33.0  -0.634840      -1.119414        16.0\n",
              "2012-08-01 02:00:00    13.0  -1.258403      -2.047367         4.0\n",
              "2012-08-01 03:00:00     7.0  -1.672773      -2.239934         3.0\n",
              "2012-08-01 04:00:00     4.0  -2.047367      -1.775958         6.0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "j4SExWfpvbfC"
      },
      "source": [
        "Congratulations you did your first predictions. Great work. \n",
        "\n",
        "Now it is time to evaluate the predictions. How good is your model?\n",
        "\n",
        "From now on you will copy-paste your whole code from above and add or change a few things."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "zXxmHBjUp2mL",
        "outputId": "9fb7e666-5da0-4166-821a-13fee2ff40eb"
      },
      "source": [
        "y_test"
      ],
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>target</th>\n",
              "      <th>target_sc</th>\n",
              "      <th>prediction_sc</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>datetime</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2012-08-01 00:00:00</th>\n",
              "      <td>3.850148</td>\n",
              "      <td>-0.398121</td>\n",
              "      <td>-0.523018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-08-01 01:00:00</th>\n",
              "      <td>3.496508</td>\n",
              "      <td>-0.634840</td>\n",
              "      <td>-1.119414</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-08-01 02:00:00</th>\n",
              "      <td>2.564949</td>\n",
              "      <td>-1.258403</td>\n",
              "      <td>-2.047367</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-08-01 03:00:00</th>\n",
              "      <td>1.945910</td>\n",
              "      <td>-1.672773</td>\n",
              "      <td>-1.775958</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-08-01 04:00:00</th>\n",
              "      <td>1.386294</td>\n",
              "      <td>-2.047367</td>\n",
              "      <td>-1.775958</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-08-07 20:00:00</th>\n",
              "      <td>6.104793</td>\n",
              "      <td>1.111085</td>\n",
              "      <td>0.999128</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-08-07 21:00:00</th>\n",
              "      <td>5.758902</td>\n",
              "      <td>0.879554</td>\n",
              "      <td>0.801240</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-08-07 22:00:00</th>\n",
              "      <td>5.411646</td>\n",
              "      <td>0.647109</td>\n",
              "      <td>0.489473</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-08-07 23:00:00</th>\n",
              "      <td>4.927254</td>\n",
              "      <td>0.322868</td>\n",
              "      <td>-0.121982</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-08-08 00:00:00</th>\n",
              "      <td>4.060443</td>\n",
              "      <td>-0.257354</td>\n",
              "      <td>-0.523018</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>169 rows × 3 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "                       target  target_sc  prediction_sc\n",
              "datetime                                               \n",
              "2012-08-01 00:00:00  3.850148  -0.398121      -0.523018\n",
              "2012-08-01 01:00:00  3.496508  -0.634840      -1.119414\n",
              "2012-08-01 02:00:00  2.564949  -1.258403      -2.047367\n",
              "2012-08-01 03:00:00  1.945910  -1.672773      -1.775958\n",
              "2012-08-01 04:00:00  1.386294  -2.047367      -1.775958\n",
              "...                       ...        ...            ...\n",
              "2012-08-07 20:00:00  6.104793   1.111085       0.999128\n",
              "2012-08-07 21:00:00  5.758902   0.879554       0.801240\n",
              "2012-08-07 22:00:00  5.411646   0.647109       0.489473\n",
              "2012-08-07 23:00:00  4.927254   0.322868      -0.121982\n",
              "2012-08-08 00:00:00  4.060443  -0.257354      -0.523018\n",
              "\n",
              "[169 rows x 3 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vesJgW2KvbfC"
      },
      "source": [
        "#### evaluate the prediction"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wwd3sas0vbfD"
      },
      "source": [
        "Let's define an error metric to evaluate the performance of our forecasting model. There are a lot of different error metrics we can use but a simple and straight forward metric is the MAPE metric which is implemented below."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5XPXbZY4vbfD"
      },
      "source": [
        "def calculate_mape(y, y_hat):\n",
        "    perc_err = (100 * (y - y_hat)) / y\n",
        "    return pd.np.mean(abs(perc_err))"
      ],
      "execution_count": 50,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QlfKKL0JvbfD"
      },
      "source": [
        "Copy your project code from above and paste it here above the calculate_mape function and run the cell.\n",
        "\n",
        "<h4><font color='red'>TODO! COMPLETE THIS SECTION!</font></h4>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "i0q1UQwnvbfD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e64c7733-a716-4813-e25c-94c05a620f53"
      },
      "source": [
        "from sklearn.tree import DecisionTreeRegressor as dtr\n",
        "\n",
        "# repeat these 2 lines outise function, else error\n",
        "df = pd.read_csv('bikesharing.csv')\n",
        "df.rename(columns={'count': 'target'}, inplace=True)\n",
        "\n",
        "# load and prepare data\n",
        "df = load_and_prepare_data()\n",
        "\n",
        "# drop columns\n",
        "cols = ['season', 'holiday', 'workingday', \n",
        "        'weather', 'temp', 'atemp', 'humidity', \n",
        "        'windspeed', 'casual', 'registered']\n",
        "df.drop(columns=cols, inplace=True)\n",
        "\n",
        "# feature engineering\n",
        "df = add_hours(df)\n",
        "df = add_isodate(df)\n",
        "df = add_month(df)\n",
        "\n",
        "# transfrom to fix skewed data\n",
        "df['target'] = np.log(df.target)\n",
        "\n",
        "# generate dummies\n",
        "cols = ['hour', 'year', 'week', 'weekday', 'month']\n",
        "df = generate_dummies(df, cols)\n",
        "\n",
        "# split target and feature\n",
        "X = df.loc[:, df.columns != 'target']\n",
        "y = df.loc[:, ['target']]\n",
        "\n",
        "# save predictions in dataframe\n",
        "preds = pd.DataFrame()\n",
        "\n",
        "# start forward test. pick date interval for train and test\n",
        "start = pd.Timestamp('2012-08-01')\n",
        "end = start + pd.Timedelta(7, unit='D')\n",
        "\n",
        "# select train and test data\n",
        "X_train = X[X.index < start]\n",
        "X_test = X[(X.index >= start) & (X.index <= end)]\n",
        "\n",
        "y_train = y[y.index < start]\n",
        "y_test = y[(y.index >= start) & (y.index <= end)]\n",
        "\n",
        "sc, y_train, y_test = scale_targets(y_train, y_test)\n",
        "\n",
        "# create a decision tree regressor model\n",
        "reg = dtr()\n",
        "# fit the model using the training dataset\n",
        "# don't forget to train the model on the scaled target (target_sc)\n",
        "reg.fit(X_train, y_train['target_sc'])\n",
        "\n",
        "# make predictions using the test features\n",
        "pred = reg.predict(X_test)\n",
        "\n",
        "# add pred to y_test\n",
        "y_test['prediction_sc'] = pred\n",
        "\n",
        "# rescale/inverse-transfrom the predictions using the StandardScaler sc\n",
        "y_test['prediction'] = sc.inverse_transform(pred)\n",
        "\n",
        "# retransform the target and the prediction values so that \n",
        "# we have our real values back (we used the log transformation earlier)\n",
        "y_test['target'] = np.exp(y_test.target)\n",
        "y_test['prediction'] = np.exp(y_test.prediction)\n",
        "\n",
        "y_test.head()\n",
        "\n",
        "mape = calculate_mape(y_test.target, y_test.prediction)\n",
        "print(mape)"
      ],
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "21.4188892170997\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Yl0u03divbfD"
      },
      "source": [
        "The MAPE should be approx. `20.83` (The number could be slightly different for you). \n",
        "\n",
        "Now define a plot function which you can use to visualize the target and predictions, and the error (difference between target and predictions).\n",
        "\n",
        "<h4><font color='red'>TODO! COMPLETE THIS SECTION!</font></h4>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iMkDYOLfvbfE"
      },
      "source": [
        "def plot_error(ts):\n",
        "    # create two plot.\n",
        "    # the first plot should show the target (blue) and the prediction (green)\n",
        "    # the second plot should show the error (predicton - target)\n",
        "    fig, ax = plt.subplots(nrows=2,ncols=1,figsize=(20,6))\n",
        "    ax[0].plot(ts.target,c='blue',label='target')\n",
        "    ax[0].plot(ts.prediction,c='green',label='prediction')\n",
        "    ax[0].set_ylabel('target: # bikes requested')\n",
        "    ax[0].set_xlabel('date')\n",
        "    ax[0].legend()\n",
        "    ax[1].plot(ts.prediction - ts.target,c='red',label='error')\n",
        "    ax[1].set_ylabel('error (target')\n",
        "    ax[1].set_xlabel('date')\n",
        "    ax[1].legend()"
      ],
      "execution_count": 71,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "O_FrzIcHvbfE"
      },
      "source": [
        "Copy your project code from above (including the MAPE calculation) and past it here above the plot_error function and run the cell.\n",
        "\n",
        "<h4><font color='red'>TODO! COMPLETE THIS SECTION!</font></h4>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "N7NYDYr-vbfE",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 385
        },
        "outputId": "2e7d03f3-086e-4caf-ab0a-49b430b922ed"
      },
      "source": [
        "from sklearn.tree import DecisionTreeRegressor as dtr\n",
        "\n",
        "# repeat these 2 lines outise function, else error\n",
        "df = pd.read_csv('bikesharing.csv')\n",
        "df.rename(columns={'count': 'target'}, inplace=True)\n",
        "\n",
        "# load and prepare data\n",
        "df = load_and_prepare_data()\n",
        "\n",
        "# drop columns\n",
        "cols = ['season', 'holiday', 'workingday', \n",
        "        'weather', 'temp', 'atemp', 'humidity', \n",
        "        'windspeed', 'casual', 'registered']\n",
        "df.drop(columns=cols, inplace=True)\n",
        "\n",
        "# feature engineering\n",
        "df = add_hours(df)\n",
        "df = add_isodate(df)\n",
        "df = add_month(df)\n",
        "\n",
        "# transfrom to fix skewed data\n",
        "df['target'] = np.log(df.target)\n",
        "\n",
        "# generate dummies\n",
        "cols = ['hour', 'year', 'week', 'weekday', 'month']\n",
        "df = generate_dummies(df, cols)\n",
        "\n",
        "# split target and feature\n",
        "X = df.loc[:, df.columns != 'target']\n",
        "y = df.loc[:, ['target']]\n",
        "\n",
        "# save predictions in dataframe\n",
        "preds = pd.DataFrame()\n",
        "\n",
        "# start forward test. pick date interval for train and test\n",
        "start = pd.Timestamp('2012-08-01')\n",
        "end = start + pd.Timedelta(7, unit='D')\n",
        "\n",
        "# select train and test data\n",
        "X_train = X[X.index < start]\n",
        "X_test = X[(X.index >= start) & (X.index <= end)]\n",
        "\n",
        "y_train = y[y.index < start]\n",
        "y_test = y[(y.index >= start) & (y.index <= end)]\n",
        "\n",
        "sc, y_train, y_test = scale_targets(y_train, y_test)\n",
        "\n",
        "# create a decision tree regressor model\n",
        "reg = dtr()\n",
        "# fit the model using the training dataset\n",
        "# don't forget to train the model on the scaled target (target_sc)\n",
        "reg.fit(X_train, y_train['target_sc'])\n",
        "\n",
        "# make predictions using the test features\n",
        "pred = reg.predict(X_test)\n",
        "\n",
        "# add pred to y_test\n",
        "y_test['prediction_sc'] = pred\n",
        "\n",
        "# rescale/inverse-transfrom the predictions using the StandardScaler sc\n",
        "y_test['prediction'] = sc.inverse_transform(pred)\n",
        "\n",
        "# retransform the target and the prediction values so that \n",
        "# we have our real values back (we used the log transformation earlier)\n",
        "y_test['target'] = np.exp(y_test.target)\n",
        "y_test['prediction'] = np.exp(y_test.prediction)\n",
        "\n",
        "y_test.head()\n",
        "\n",
        "mape = calculate_mape(y_test.target, y_test.prediction)\n",
        "print(mape)\n",
        "\n",
        "plot_error(y_test)"
      ],
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "20.519766406428527\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1440x432 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YJAlFU1zvbfE"
      },
      "source": [
        "Your output should look something like this ![](https://drive.google.com/uc?export=view&id=1joUiYlKehuV9G18FLXZw8aDiPC0O65i1):\n",
        "\n",
        "Good work! You built a nice code structure to make predictions and to evaluate them. The target follows a certain pattern with two repeating peaks from day to day and your model was able to predict them accurately most of the time. Your model even predicted the two days which don't follow the two-peak-pattern.\n",
        "\n",
        "The next step would be to test multiple prediction windows, not only from 2012-08-01 until 2012-08-08. This method is called forward-testing (or back-testing) and it is the equivalent to a cross validation method you would normally use. Forward-testing is typically used to evaluate forecasting systems.\n",
        "\n",
        "The forward-testing method isn't available like cross validation in sklearn. Thus we would have to implement it ourselves. But the implementation is out of scope of this notebook. If you are still interested in how the forward-testing can be implemented, let me know or feel free to google it and built it yourself. \n",
        "\n",
        "Now that you have a nice code structure it is time for our first hypothesis and to improve your forecasting project."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JuXdp_Y-vbfE"
      },
      "source": [
        "### Data Science Hypothesis Cycle 1 - Random Forest\n",
        "\n",
        "After training and defining our baseline with the decision tree model and the datetime feature, it is time to improve the model. We will do this by defining a hypothesis and proving or disproving the hypothesis. We want to improve the forecasting performance iteration by iteration, which also means if you disprove a hypothesis and your forecasting system didn't improve, it is totally fine.\n",
        "\n",
        "In this first round we will try to improve the forecasting performance with a more complicated model (only the model itself is a bit more sophisticated. The implementation follows the same pattern with .fit and .predict so it is as easy as before). \n",
        "\n",
        "As base model you used the DecisionTree, now we want to improve the model performance by using multiple DecisionTrees. The model with multiple DecisionTrees is called RandomForest. \n",
        "\n",
        "____\n",
        "#### Hypothesis\n",
        "The forecasting performance will improve with a model upgrade from DecisionTree to RandomForest.\n",
        "___\n",
        "\n",
        "Copy your latest code structure with the evaluation step in it and replace the decision tree with a ramdom forest model.\n",
        "\n",
        "<h4><font color='red'>TODO! COMPLETE THIS SECTION!</font></h4>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RYozl0FCvbfF",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 385
        },
        "outputId": "c5a60a1d-afda-4c32-bced-e55976903513"
      },
      "source": [
        "from sklearn.ensemble import RandomForestRegressor\n",
        "\n",
        "# repeat these 2 lines outise function, else error\n",
        "df = pd.read_csv('bikesharing.csv')\n",
        "df.rename(columns={'count': 'target'}, inplace=True)\n",
        "\n",
        "# load and prepare data\n",
        "df = load_and_prepare_data()\n",
        "\n",
        "# drop columns\n",
        "cols = ['season', 'holiday', 'workingday', \n",
        "        'weather', 'temp', 'atemp', 'humidity', \n",
        "        'windspeed', 'casual', 'registered']\n",
        "df.drop(columns=cols, inplace=True)\n",
        "\n",
        "# feature engineering\n",
        "df = add_hours(df)\n",
        "df = add_isodate(df)\n",
        "df = add_month(df)\n",
        "\n",
        "# transfrom to fix skewed data\n",
        "df['target'] = np.log(df.target)\n",
        "\n",
        "# generate dummies\n",
        "cols = ['hour', 'year', 'week', 'weekday', 'month']\n",
        "df = generate_dummies(df, cols)\n",
        "\n",
        "# split target and feature\n",
        "X = df.loc[:, df.columns != 'target']\n",
        "y = df.loc[:, ['target']]\n",
        "\n",
        "# save predictions in dataframe\n",
        "preds = pd.DataFrame()\n",
        "\n",
        "# start forward test. pick date interval for train and test\n",
        "start = pd.Timestamp('2012-08-01')\n",
        "end = start + pd.Timedelta(7, unit='D')\n",
        "\n",
        "# select train and test data\n",
        "X_train = X[X.index < start]\n",
        "X_test = X[(X.index >= start) & (X.index <= end)]\n",
        "\n",
        "y_train = y[y.index < start]\n",
        "y_test = y[(y.index >= start) & (y.index <= end)]\n",
        "\n",
        "sc, y_train, y_test = scale_targets(y_train, y_test)\n",
        "\n",
        "# create a decision tree regressor model\n",
        "reg = RandomForestRegressor()\n",
        "# fit the model using the training dataset\n",
        "# don't forget to train the model on the scaled target (target_sc)\n",
        "reg.fit(X_train, y_train['target_sc'])\n",
        "\n",
        "# make predictions using the test features\n",
        "pred = reg.predict(X_test)\n",
        "\n",
        "# add pred to y_test\n",
        "y_test['prediction_sc'] = pred\n",
        "\n",
        "# rescale/inverse-transfrom the predictions using the StandardScaler sc\n",
        "y_test['prediction'] = sc.inverse_transform(pred)\n",
        "\n",
        "# retransform the target and the prediction values so that \n",
        "# we have our real values back (we used the log transformation earlier)\n",
        "y_test['target'] = np.exp(y_test.target)\n",
        "y_test['prediction'] = np.exp(y_test.prediction)\n",
        "\n",
        "y_test.head()\n",
        "\n",
        "mape = calculate_mape(y_test.target, y_test.prediction)\n",
        "print(mape)\n",
        "\n",
        "plot_error(y_test)"
      ],
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "18.48075363607771\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 1440x432 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YgY6Q0orvbfF"
      },
      "source": [
        "You improved the model performance from `20.07` to `19.24` (The number could be slightly different for you) and thus proved your first hypothesis. (Keep in mind the ideal way of testing a hypothesis would be by using the forward testing method).\n",
        "\n",
        "Let's formulate the  next hypothesis."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DJY7VtO1vbfF"
      },
      "source": [
        "### Data Science Hypothesis Cycle 2 - Season feature \n",
        "\n",
        "Now let's add an additional feature, the season feature, to your model and see if the forecasting performance can be further improved.\n",
        "\n",
        "Before randomly adding the feature, let's make a quick visualization to see if the season feature could be a relevant feature."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FTwaUqFLvbfF",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 809
        },
        "outputId": "f193ef67-99de-4819-d68a-7305cddd8577"
      },
      "source": [
        "# repeat these 2 lines outise function, else error\n",
        "df = pd.read_csv('bikesharing.csv')\n",
        "df.rename(columns={'count': 'target'}, inplace=True)\n",
        "\n",
        "df = load_and_prepare_data()\n",
        "df = df[['season', 'target']]\n",
        "df['hour'] = df.index.hour\n",
        "df['day'] = df.index.day\n",
        "\n",
        "hourly = df[['hour', 'season', 'target']].groupby(\n",
        "    ['hour', 'season']).mean().reset_index()\n",
        "daily = df[['day', 'season', 'target']].groupby(\n",
        "    ['day', 'season']).mean().reset_index()\n",
        "\n",
        "plt.figure(figsize=(12, 6))\n",
        "sns.pointplot(\n",
        "    x=hourly['hour'], y=hourly['target'], \n",
        "    hue=hourly['season'], data=hourly)\n",
        "plt.title(\"Grouped target for of each season vs hour\")\n",
        "\n",
        "plt.figure(figsize=(12, 6))\n",
        "sns.pointplot(\n",
        "    x=daily['day'], y=daily['target'], \n",
        "    hue=daily['season'], data=daily)\n",
        "plt.title(\"Grouped target for of each season vs day in month\")"
      ],
      "execution_count": 76,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Grouped target for of each season vs day in month')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 76
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 864x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JFdNASOvvbfF"
      },
      "source": [
        "This quick visualization shows us that the spring season (1) has a lower count of rented bikes. Thus the season feature could improve our model by separating the spring season better from the other seasons.\n",
        "\n",
        "___\n",
        "#### Hypothesis\n",
        "The season feature will improve the model performance because the spring season has a lower count of rented bikes.\n",
        "___\n",
        "\n",
        "Let's try it out. Implement a season feature into your forecasting system.\n",
        "\n",
        "Copy the code from where you implemented the RandomForestRegression model.\n",
        "\n",
        "Remove the season column from the drop columns list so that the season feature is available for your model. Also don't forget to generate dummy variables for the season feature. Add the season feature to the column list for which you generate dummy variables.\n",
        "\n",
        "Finally run the code again and check if you could improve the model performance even further.\n",
        "\n",
        "<h4><font color='red'>TODO! COMPLETE THIS SECTION!</font></h4>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WvLeSMDjvbfF",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 385
        },
        "outputId": "7a43161e-ea5d-4311-e555-04146140f9c2"
      },
      "source": [
        "from sklearn.ensemble import RandomForestRegressor\r\n",
        "\r\n",
        "# repeat these 2 lines outise function, else error\r\n",
        "df = pd.read_csv('bikesharing.csv')\r\n",
        "df.rename(columns={'count': 'target'}, inplace=True)\r\n",
        "\r\n",
        "# load and prepare data\r\n",
        "df = load_and_prepare_data()\r\n",
        "\r\n",
        "# drop columns\r\n",
        "cols = ['holiday', 'workingday', \r\n",
        "        'weather', 'temp', 'atemp', 'humidity', \r\n",
        "        'windspeed', 'casual', 'registered']\r\n",
        "df.drop(columns=cols, inplace=True)\r\n",
        "\r\n",
        "# feature engineering\r\n",
        "df = add_hours(df)\r\n",
        "df = add_isodate(df)\r\n",
        "df = add_month(df)\r\n",
        "\r\n",
        "# transfrom to fix skewed data\r\n",
        "df['target'] = np.log(df.target)\r\n",
        "\r\n",
        "# generate dummies\r\n",
        "cols = ['season','hour', 'year', 'week', 'weekday', 'month']\r\n",
        "df = generate_dummies(df, cols)\r\n",
        "\r\n",
        "# split target and feature\r\n",
        "X = df.loc[:, df.columns != 'target']\r\n",
        "y = df.loc[:, ['target']]\r\n",
        "\r\n",
        "# save predictions in dataframe\r\n",
        "preds = pd.DataFrame()\r\n",
        "\r\n",
        "# start forward test. pick date interval for train and test\r\n",
        "start = pd.Timestamp('2012-08-01')\r\n",
        "end = start + pd.Timedelta(7, unit='D')\r\n",
        "\r\n",
        "# select train and test data\r\n",
        "X_train = X[X.index < start]\r\n",
        "X_test = X[(X.index >= start) & (X.index <= end)]\r\n",
        "\r\n",
        "y_train = y[y.index < start]\r\n",
        "y_test = y[(y.index >= start) & (y.index <= end)]\r\n",
        "\r\n",
        "sc, y_train, y_test = scale_targets(y_train, y_test)\r\n",
        "\r\n",
        "# create a decision tree regressor model\r\n",
        "reg = RandomForestRegressor()\r\n",
        "# fit the model using the training dataset\r\n",
        "# don't forget to train the model on the scaled target (target_sc)\r\n",
        "reg.fit(X_train, y_train['target_sc'])\r\n",
        "\r\n",
        "# make predictions using the test features\r\n",
        "pred = reg.predict(X_test)\r\n",
        "\r\n",
        "# add pred to y_test\r\n",
        "y_test['prediction_sc'] = pred\r\n",
        "\r\n",
        "# rescale/inverse-transfrom the predictions using the StandardScaler sc\r\n",
        "y_test['prediction'] = sc.inverse_transform(pred)\r\n",
        "\r\n",
        "# retransform the target and the prediction values so that \r\n",
        "# we have our real values back (we used the log transformation earlier)\r\n",
        "y_test['target'] = np.exp(y_test.target)\r\n",
        "y_test['prediction'] = np.exp(y_test.prediction)\r\n",
        "\r\n",
        "y_test.head()\r\n",
        "\r\n",
        "mape = calculate_mape(y_test.target, y_test.prediction)\r\n",
        "print(mape)\r\n",
        "\r\n",
        "plot_error(y_test)"
      ],
      "execution_count": 77,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "15.861185020262525\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1440x432 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1LbcrtCpvbfG"
      },
      "source": [
        "The season feature improved the model from `19.23` to `16.94` for this one week (The number could be slightly different for you). Hypothesis proved. \n",
        "\n",
        "Let's try out another feature in our next hypothesis."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gXaBuAmnvbfG"
      },
      "source": [
        "### Data Science Hypothesis Cycle 3 - Temperature feature"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IJ4ruEaSvbfG"
      },
      "source": [
        "Now let's include a numerical feature into our model. Logically it makes sense that more bikes are rented if the weather is nicer. Therefore let's see if a temperature feature can improve the model.\n",
        "\n",
        "But again, before just throwing the feature at the model, we will check if the temperature correlates with our target value (count of rented bikes).\n",
        "\n",
        "Calculate the correlation between the temperature and the target.\n",
        "\n",
        "<h4><font color='red'>TODO! COMPLETE THIS SECTION!</font></h4>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zwrXu47_0qtt",
        "outputId": "eadd2ec1-d20e-4105-c083-9048aa652b4c"
      },
      "source": [
        "df.columns"
      ],
      "execution_count": 91,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['season', 'holiday', 'workingday', 'weather', 'temp', 'atemp',\n",
              "       'humidity', 'windspeed', 'casual', 'registered', 'target'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 91
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "enuiqDPevbfG",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 287
        },
        "outputId": "caa7a3bb-bb70-490e-ca79-3a450cc4c09e"
      },
      "source": [
        "df = pd.read_csv('bikesharing.csv')\n",
        "df.rename(columns={'count': 'target'}, inplace=True)\n",
        "\n",
        "df = load_and_prepare_data()\n",
        "# calculate the correlation (if you don't know how google \"pandas correlation\")\n",
        "corr = df[['temp', 'target']].corr()\n",
        "sns.heatmap(corr, cmap='Blues', annot=corr)"
      ],
      "execution_count": 98,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fd531852c88>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 98
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cb2BTWcJvbfG"
      },
      "source": [
        "The correlation plot shows a positive correlation between the target and temperature. Thus the temperature feature could improve our model.\n",
        "\n",
        "___\n",
        "#### Hypothesis\n",
        "People are renting more bikes at higher temperatures. Thus a temperature feature will improve our model.\n",
        "___\n",
        "\n",
        "Keep in mind that you have to scale the temperature data after you split the data into train and test sets.\n",
        "\n",
        "First, build a new function that scales the training data by fitting and transforming it and scale the test data afterwards by using the scaler which was fitted on the traing data set.\n",
        "\n",
        "<h4><font color='red'>TODO! COMPLETE THIS SECTION!</font></h4>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "C3qeqGWcvbfH"
      },
      "source": [
        "def scale_feature(train, test, col):\n",
        "    sc = StandardScaler()\n",
        "    # fit and transfrom train[[col]]\n",
        "    train[col] = sc.fit_transform(train[[col]])\n",
        "    \n",
        "    # transfrom the test data\n",
        "    test[col] = sc.transform(test[[col]])\n",
        "    return train, test"
      ],
      "execution_count": 86,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WGrkUMBovbfH"
      },
      "source": [
        "Again copy and paste your last forecasting code from where you implemented the season feature.\n",
        "\n",
        "Add your new function (`scale_feautre`) after the target scaler function (`scale_targets`). Don't forget to remove the temp column from the list of dropped columns and input the temp column name into your `scale_feature` function.\n",
        "\n",
        "<h4><font color='red'>TODO! COMPLETE THIS SECTION!</font></h4>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8N-hrCgMvbfH",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 385
        },
        "outputId": "44b36381-3978-4252-9be6-f5c351ca02f1"
      },
      "source": [
        "from sklearn.ensemble import RandomForestRegressor\r\n",
        "\r\n",
        "# repeat these 2 lines outise function, else error\r\n",
        "df = pd.read_csv('bikesharing.csv')\r\n",
        "df.rename(columns={'count': 'target'}, inplace=True)\r\n",
        "\r\n",
        "# load and prepare data\r\n",
        "df = load_and_prepare_data()\r\n",
        "\r\n",
        "# drop columns\r\n",
        "cols = ['holiday', 'workingday', \r\n",
        "        'weather', 'atemp', 'humidity', \r\n",
        "        'windspeed', 'casual', 'registered']\r\n",
        "df.drop(columns=cols, inplace=True)\r\n",
        "\r\n",
        "# feature engineering\r\n",
        "df = add_hours(df)\r\n",
        "df = add_isodate(df)\r\n",
        "df = add_month(df)\r\n",
        "\r\n",
        "# transfrom to fix skewed data\r\n",
        "df['target'] = np.log(df.target)\r\n",
        "\r\n",
        "# generate dummies\r\n",
        "cols = ['season','hour', 'year', 'week', 'weekday', 'month']\r\n",
        "df = generate_dummies(df, cols)\r\n",
        "\r\n",
        "# split target and feature\r\n",
        "X = df.loc[:, df.columns != 'target']\r\n",
        "y = df.loc[:, ['target']]\r\n",
        "\r\n",
        "# save predictions in dataframe\r\n",
        "preds = pd.DataFrame()\r\n",
        "\r\n",
        "# start forward test. pick date interval for train and test\r\n",
        "start = pd.Timestamp('2012-08-01')\r\n",
        "end = start + pd.Timedelta(7, unit='D')\r\n",
        "\r\n",
        "# select train and test data\r\n",
        "X_train = X[X.index < start]\r\n",
        "X_test = X[(X.index >= start) & (X.index <= end)]\r\n",
        "\r\n",
        "y_train = y[y.index < start]\r\n",
        "y_test = y[(y.index >= start) & (y.index <= end)]\r\n",
        "\r\n",
        "# scale target/y\r\n",
        "sc, y_train, y_test = scale_targets(y_train, y_test)\r\n",
        "# scale features\r\n",
        "scale_feature(X_train, X_test, 'temp')\r\n",
        "\r\n",
        "# create a decision tree regressor model\r\n",
        "reg = RandomForestRegressor()\r\n",
        "# fit the model using the training dataset\r\n",
        "# don't forget to train the model on the scaled target (target_sc)\r\n",
        "reg.fit(X_train, y_train['target_sc'])\r\n",
        "\r\n",
        "# make predictions using the test features\r\n",
        "pred = reg.predict(X_test)\r\n",
        "\r\n",
        "# add pred to y_test\r\n",
        "y_test['prediction_sc'] = pred\r\n",
        "\r\n",
        "# rescale/inverse-transfrom the predictions using the StandardScaler sc\r\n",
        "y_test['prediction'] = sc.inverse_transform(pred)\r\n",
        "\r\n",
        "# retransform the target and the prediction values so that \r\n",
        "# we have our real values back (we used the log transformation earlier)\r\n",
        "y_test['target'] = np.exp(y_test.target)\r\n",
        "y_test['prediction'] = np.exp(y_test.prediction)\r\n",
        "\r\n",
        "y_test.head()\r\n",
        "\r\n",
        "mape = calculate_mape(y_test.target, y_test.prediction)\r\n",
        "print(mape)\r\n",
        "\r\n",
        "plot_error(y_test)"
      ],
      "execution_count": 87,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "15.404249354323163\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1440x432 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aeJJHxJgvbfH"
      },
      "source": [
        "Great. the performance for this one week improved again from `16.94` to `15.22`. (The number could be slightly different for you)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sR8-SlTXvbfH"
      },
      "source": [
        "### Data Science Hypothesis Cycle 4 - Your ideas\n",
        "\n",
        "Now it's time for you to be creative. You can now try your own ideas. There are a lot of features we haven't tried yet like the holiday feature or the humidity feature. \n",
        "\n",
        "But you can also come up with self designed features. Earlier we used the season feature because we saw that the spring season has lower bike rental counts. We included the default season feature with all four seasons but you could engineer a more specific feature which contains the information if it is spring season or not (new column named \"spring\". 0 - not spring; 1 - spring). Maybe the model can make use of this more specific feature. \n",
        "\n",
        "If you want, you can also implement the forward-testing method to test if the ML model and all the features you added improve other weeks and time intervals too or if we just picked a lucky time intervall where all features improve the model.\n",
        "\n",
        "Keep in mind to either generate dummy variables if you are dealing with categorical features or to scale the data after splitting it into training and testings sets if you have numerical features.\n",
        "\n",
        "Have fun!"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kbOd10cGvbfH"
      },
      "source": [
        "# There are correlations between target and: 'humidity', 'weather', 'windspeed'. So implement these too.\r\n",
        "from sklearn.ensemble import RandomForestRegressor\r\n",
        "\r\n",
        "# repeat these 2 lines outise function, else error\r\n",
        "df = pd.read_csv('bikesharing.csv')\r\n",
        "df.rename(columns={'count': 'target'}, inplace=True)\r\n",
        "\r\n",
        "# load and prepare data\r\n",
        "df = load_and_prepare_data()\r\n",
        "\r\n",
        "# drop columns\r\n",
        "cols = ['holiday', 'workingday', \r\n",
        "        'atemp', 'casual', 'registered','weather']\r\n",
        "df.drop(columns=cols, inplace=True)\r\n",
        "\r\n",
        "# feature engineering\r\n",
        "df = add_hours(df)\r\n",
        "df = add_isodate(df)\r\n",
        "df = add_month(df)\r\n",
        "\r\n",
        "# transfrom to fix skewed data\r\n",
        "df['target'] = np.log(df.target)\r\n",
        "\r\n",
        "# generate dummies\r\n",
        "cols = ['season','hour', 'year', 'week', 'weekday', 'month','humidity','windspeed']\r\n",
        "df = generate_dummies(df, cols)\r\n",
        "\r\n",
        "# split target and feature\r\n",
        "X = df.loc[:, df.columns != 'target']\r\n",
        "y = df.loc[:, ['target']]\r\n",
        "\r\n",
        "# save predictions in dataframe\r\n",
        "preds = pd.DataFrame()\r\n",
        "\r\n",
        "# start forward test. pick date interval for train and test\r\n",
        "start = pd.Timestamp('2012-08-01')\r\n",
        "end = start + pd.Timedelta(7, unit='D')\r\n",
        "\r\n",
        "# select train and test data\r\n",
        "X_train = X[X.index < start]\r\n",
        "X_test = X[(X.index >= start) & (X.index <= end)]\r\n",
        "\r\n",
        "y_train = y[y.index < start]\r\n",
        "y_test = y[(y.index >= start) & (y.index <= end)]\r\n",
        "\r\n",
        "# scale target/y\r\n",
        "sc, y_train, y_test = scale_targets(y_train, y_test)\r\n",
        "# scale features\r\n",
        "scale_feature(X_train, X_test, 'temp')\r\n",
        "#scale_feature(X_train, X_test, 'humidity')\r\n",
        "#scale_feature(X_train, X_test, 'windspeed')\r\n",
        "\r\n",
        "# create a decision tree regressor model\r\n",
        "reg = RandomForestRegressor()\r\n",
        "# fit the model using the training dataset\r\n",
        "# don't forget to train the model on the scaled target (target_sc)\r\n",
        "reg.fit(X_train, y_train['target_sc'])\r\n",
        "\r\n",
        "# make predictions using the test features\r\n",
        "pred = reg.predict(X_test)\r\n",
        "\r\n",
        "# add pred to y_test\r\n",
        "y_test['prediction_sc'] = pred\r\n",
        "\r\n",
        "# rescale/inverse-transfrom the predictions using the StandardScaler sc\r\n",
        "y_test['prediction'] = sc.inverse_transform(pred)\r\n",
        "\r\n",
        "# retransform the target and the prediction values so that \r\n",
        "# we have our real values back (we used the log transformation earlier)\r\n",
        "y_test['target'] = np.exp(y_test.target)\r\n",
        "y_test['prediction'] = np.exp(y_test.prediction)\r\n",
        "\r\n",
        "y_test.head()\r\n",
        "\r\n",
        "mape = calculate_mape(y_test.target, y_test.prediction)\r\n",
        "print(mape)\r\n",
        "\r\n",
        "plot_error(y_test)\r\n",
        "\r\n",
        "# conclusions: with all vars, model performs worse (error: 18)\r\n",
        "# without windspeed & weather improved: 16. Humidity doesn´t change error."
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "x4t4S6yxcTPR"
      },
      "source": [
        "## Summary and Outlook\n",
        "You built a complete project from scratch. Not only did you explore and clean the data but you also engineered features and implemented a machine learning model which is trained, tested and evaluated.\n",
        "\n",
        "This notebook was supposed to be a short introduction on how you can combine all the things you have learnt so far to start your own data science (machine learning) projects.\n",
        "\n",
        "Keep in mind that the steps for other problems like classification problems or regression problems which are not forecasts can vary. But now you should know what questions to ask, like: What is the best way to scale the data? How should I split my data? What is the best approach to evaluate my model?\n",
        "\n",
        "If you found the hypothesis process useful, use it in your own projects. If something is missing or too much, please iterate on the idea and change it, so that it suits your work style.\n",
        "\n",
        "The next steps from here on can include:\n",
        "- buidling the forward-testing method to truely test how your model is performing.\n",
        "- creating external .py files where you store all your functions, which you implement in the notebook here. External .py files will make it easier for you to share your code, make your code more production ready and work more efficient in teams.\n",
        "\n",
        "Let me know if you have interest in bringing this notebook and code structure to production by implementing all the functions inside .py files and creating a useful project-folder-system or if you want to know how to implement the forward-testing method."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nGhSjPmYvbfI"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}
